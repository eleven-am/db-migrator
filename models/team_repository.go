//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: models
// Model: Team
// Generated on: 2025-07-16 21:12:15 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=models
//
// For more information, see:
//   https://github.com/eleven-am/storm

package models

import (
	"context"
	"fmt"
	"github.com/eleven-am/storm/internal/orm"
	"github.com/jmoiron/sqlx"
)

// TeamRepository provides type-safe operations for Team
// Inherits standard CRUD operations from orm.Repository:
// Find, FindAll, Create, Update, Delete, UpsertMany, BulkUpdate, etc.
type TeamRepository struct {
	*orm.Repository[Team]
}

// newTeamRepository creates a new Team repository (internal use only - use Storm)
func newTeamRepository(db *sqlx.DB) (*TeamRepository, error) {
	baseRepo, err := orm.NewRepository[Team](db, TeamMetadata)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository: %w", err)
	}

	return &TeamRepository{
		Repository: baseRepo,
	}, nil
}

// newTeamRepositoryWithTx creates a new Team repository using an existing transaction (internal use only - use Storm)
func newTeamRepositoryWithTx(tx *sqlx.Tx) (*TeamRepository, error) {
	baseRepo, err := orm.NewRepositoryWithTx[Team](tx, TeamMetadata)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository with transaction: %w", err)
	}

	return &TeamRepository{
		Repository: baseRepo,
	}, nil
}

// Query returns a type-safe query builder for Team
//
// Example:
//
//	filteredTeams, err := repo.Query().
//	    Where(Teams.Name.Like("%search%")).
//	    OrderBy(Teams.Id.Desc()).
//	    Limit(10).
//	    Find()
func (r *TeamRepository) Query() *TeamQuery {
	return &TeamQuery{
		Query: r.Repository.Query(),
		repo:  r,
	}
}

// QueryContext returns a type-safe query builder for Team with context
//
// Example:
//
//	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
//	defer cancel()
//	results, err := repo.QueryContext(ctx).
//	    Limit(100).
//	    Find()
func (r *TeamRepository) QueryContext(ctx context.Context) *TeamQuery {
	return &TeamQuery{
		Query: r.Repository.QueryContext(ctx),
		repo:  r,
	}
}

// WithProjects includes the Projects relationship in queries
//
// Example:
//
//	teamWithAllProjects, err := repo.WithProjects().Find()
//	// Each Team will have its Projects slice populated
func (r *TeamRepository) WithProjects() *TeamQuery {
	return &TeamQuery{
		Query: r.Repository.Query().Include("Projects"),
		repo:  r,
	}
}

// WithSubscriptions includes the Subscriptions relationship in queries
//
// Example:
//
//	teamWithAllSubscriptions, err := repo.WithSubscriptions().Find()
//	// Each Team will have its Subscriptions slice populated
func (r *TeamRepository) WithSubscriptions() *TeamQuery {
	return &TeamQuery{
		Query: r.Repository.Query().Include("Subscriptions"),
		repo:  r,
	}
}

// WithUsers includes the Users relationship in queries
//
// Example:
//
//	teamWithAllUsers, err := repo.WithUsers().Find()
//	// Each Team will have its Users slice populated
func (r *TeamRepository) WithUsers() *TeamQuery {
	return &TeamQuery{
		Query: r.Repository.Query().Include("Users"),
		repo:  r,
	}
}

// WithAuditLogs includes the AuditLogs relationship in queries
//
// Example:
//
//	teamWithAllAuditLogs, err := repo.WithAuditLogs().Find()
//	// Each Team will have its AuditLogs slice populated
func (r *TeamRepository) WithAuditLogs() *TeamQuery {
	return &TeamQuery{
		Query: r.Repository.Query().Include("AuditLogs"),
		repo:  r,
	}
}

// TeamQuery provides type-safe query building for Team
type TeamQuery struct {
	*orm.Query[Team]
	repo *TeamRepository
}

// Where adds a type-safe WHERE condition
func (q *TeamQuery) Where(condition orm.Condition) *TeamQuery {
	q.Query = q.Query.Where(condition)
	return q
}

// OrderBy adds ordering to the query
func (q *TeamQuery) OrderBy(expressions ...string) *TeamQuery {
	q.Query = q.Query.OrderBy(expressions...)
	return q
}

// Limit sets the LIMIT clause
func (q *TeamQuery) Limit(limit uint64) *TeamQuery {
	q.Query = q.Query.Limit(limit)
	return q
}

// Offset sets the OFFSET clause
func (q *TeamQuery) Offset(offset uint64) *TeamQuery {
	q.Query = q.Query.Offset(offset)
	return q
}

// Find executes the query and returns all matching records
func (q *TeamQuery) Find() ([]Team, error) {
	return q.Query.Find()
}

// First executes the query and returns the first matching record
func (q *TeamQuery) First() (*Team, error) {
	return q.Query.First()
}

// Count executes the query and returns the count of matching records
func (q *TeamQuery) Count() (int64, error) {
	return q.Query.Count()
}

// Exists executes the query and returns true if any records match
func (q *TeamQuery) Exists() (bool, error) {
	return q.Query.Exists()
}

// Delete executes the query and deletes all matching records
func (q *TeamQuery) Delete() (int64, error) {
	return q.Query.Delete()
}
