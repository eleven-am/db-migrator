//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: models
// Model: ExecutionLog
// Generated on: 2025-07-16 21:12:15 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=models
//
// For more information, see:
//   https://github.com/eleven-am/storm

package models

import (
	"github.com/eleven-am/storm/internal/orm"
)

// ExecutionLogMetadata provides compile-time metadata for ExecutionLog
var ExecutionLogMetadata = &orm.ModelMetadata{
	TableName:  "execution_logs",
	StructName: "ExecutionLog",

	Columns: map[string]*orm.ColumnMetadata{
		"Id": {
			FieldName:       "Id",
			DBName:          "id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    true,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.Id
			},
		},
		"ProjectId": {
			FieldName:       "ProjectId",
			DBName:          "project_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.ProjectId
			},
		},
		"CorrelationId": {
			FieldName:       "CorrelationId",
			DBName:          "correlation_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.CorrelationId
			},
		},
		"TriggerId": {
			FieldName:       "TriggerId",
			DBName:          "trigger_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.TriggerId
			},
		},
		"PipelineId": {
			FieldName:       "PipelineId",
			DBName:          "pipeline_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.PipelineId
			},
		},
		"Status": {
			FieldName:       "Status",
			DBName:          "status",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.Status
			},
		},
		"StartedAt": {
			FieldName:       "StartedAt",
			DBName:          "started_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.StartedAt
			},
		},
		"CompletedAt": {
			FieldName:       "CompletedAt",
			DBName:          "completed_at",
			GoType:          "time.Time",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				if m.CompletedAt != nil {
					return *m.CompletedAt
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(ExecutionLog).CompletedAt == nil
			},
		},
		"DurationMs": {
			FieldName:       "DurationMs",
			DBName:          "duration_ms",
			GoType:          "int64",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				if m.DurationMs != nil {
					return *m.DurationMs
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(ExecutionLog).DurationMs == nil
			},
		},
		"InputData": {
			FieldName:       "InputData",
			DBName:          "input_data",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.InputData
			},
		},
		"OutputData": {
			FieldName:       "OutputData",
			DBName:          "output_data",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.OutputData
			},
		},
		"ErrorDetails": {
			FieldName:       "ErrorDetails",
			DBName:          "error_details",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.ErrorDetails
			},
		},
		"Metadata": {
			FieldName:       "Metadata",
			DBName:          "metadata",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.Metadata
			},
		},
		"CreatedAt": {
			FieldName:       "CreatedAt",
			DBName:          "created_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.CreatedAt
			},
		},
		"EventSummary": {
			FieldName:       "EventSummary",
			DBName:          "event_summary",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.EventSummary
			},
		},
		"StageEvents": {
			FieldName:       "StageEvents",
			DBName:          "stage_events",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.StageEvents
			},
		},
		"TotalEvents": {
			FieldName:       "TotalEvents",
			DBName:          "total_events",
			GoType:          "int32",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ExecutionLog)
				return m.TotalEvents
			},
		},
	},

	ColumnMap: map[string]string{
		"Id":            "id",
		"ProjectId":     "project_id",
		"CorrelationId": "correlation_id",
		"TriggerId":     "trigger_id",
		"PipelineId":    "pipeline_id",
		"Status":        "status",
		"StartedAt":     "started_at",
		"CompletedAt":   "completed_at",
		"DurationMs":    "duration_ms",
		"InputData":     "input_data",
		"OutputData":    "output_data",
		"ErrorDetails":  "error_details",
		"Metadata":      "metadata",
		"CreatedAt":     "created_at",
		"EventSummary":  "event_summary",
		"StageEvents":   "stage_events",
		"TotalEvents":   "total_events",
	},

	ReverseMap: map[string]string{
		"id":             "Id",
		"project_id":     "ProjectId",
		"correlation_id": "CorrelationId",
		"trigger_id":     "TriggerId",
		"pipeline_id":    "PipelineId",
		"status":         "Status",
		"started_at":     "StartedAt",
		"completed_at":   "CompletedAt",
		"duration_ms":    "DurationMs",
		"input_data":     "InputData",
		"output_data":    "OutputData",
		"error_details":  "ErrorDetails",
		"metadata":       "Metadata",
		"created_at":     "CreatedAt",
		"event_summary":  "EventSummary",
		"stage_events":   "StageEvents",
		"total_events":   "TotalEvents",
	},

	PrimaryKeys: []string{
		"id",
	},

	Relationships: map[string]*orm.RelationshipMetadata{
		"Pipeline": {
			Name:       "Pipeline",
			Type:       "belongs_to",
			Target:     "Pipeline",
			ForeignKey: "pipeline_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*ExecutionLog).Pipeline = value.(*Pipeline)
			},
			IsSlice: false,
		},
		"Project": {
			Name:       "Project",
			Type:       "belongs_to",
			Target:     "Project",
			ForeignKey: "project_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*ExecutionLog).Project = value.(*Project)
			},
			IsSlice: false,
		},
		"Trigger": {
			Name:       "Trigger",
			Type:       "belongs_to",
			Target:     "Trigger",
			ForeignKey: "trigger_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*ExecutionLog).Trigger = value.(*Trigger)
			},
			IsSlice: false,
		},
	},
}
