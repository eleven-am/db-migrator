//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: models
// Model: ApiKey
// Generated on: 2025-07-16 21:12:15 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=models
//
// For more information, see:
//   https://github.com/eleven-am/storm

package models

import (
	"github.com/eleven-am/storm/internal/orm"
)

// ApiKeyMetadata provides compile-time metadata for ApiKey
var ApiKeyMetadata = &orm.ModelMetadata{
	TableName:  "api_keys",
	StructName: "ApiKey",

	Columns: map[string]*orm.ColumnMetadata{
		"Id": {
			FieldName:       "Id",
			DBName:          "id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    true,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ApiKey)
				return m.Id
			},
		},
		"ProjectId": {
			FieldName:       "ProjectId",
			DBName:          "project_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ApiKey)
				return m.ProjectId
			},
		},
		"Name": {
			FieldName:       "Name",
			DBName:          "name",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ApiKey)
				return m.Name
			},
		},
		"KeyPrefix": {
			FieldName:       "KeyPrefix",
			DBName:          "key_prefix",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ApiKey)
				return m.KeyPrefix
			},
		},
		"SecretHash": {
			FieldName:       "SecretHash",
			DBName:          "secret_hash",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ApiKey)
				return m.SecretHash
			},
		},
		"Permissions": {
			FieldName:       "Permissions",
			DBName:          "permissions",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ApiKey)
				return m.Permissions
			},
		},
		"LastUsedAt": {
			FieldName:       "LastUsedAt",
			DBName:          "last_used_at",
			GoType:          "time.Time",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ApiKey)
				if m.LastUsedAt != nil {
					return *m.LastUsedAt
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(ApiKey).LastUsedAt == nil
			},
		},
		"ExpiresAt": {
			FieldName:       "ExpiresAt",
			DBName:          "expires_at",
			GoType:          "time.Time",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ApiKey)
				if m.ExpiresAt != nil {
					return *m.ExpiresAt
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(ApiKey).ExpiresAt == nil
			},
		},
		"CreatedAt": {
			FieldName:       "CreatedAt",
			DBName:          "created_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ApiKey)
				return m.CreatedAt
			},
		},
		"UpdatedAt": {
			FieldName:       "UpdatedAt",
			DBName:          "updated_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(ApiKey)
				return m.UpdatedAt
			},
		},
	},

	ColumnMap: map[string]string{
		"Id":          "id",
		"ProjectId":   "project_id",
		"Name":        "name",
		"KeyPrefix":   "key_prefix",
		"SecretHash":  "secret_hash",
		"Permissions": "permissions",
		"LastUsedAt":  "last_used_at",
		"ExpiresAt":   "expires_at",
		"CreatedAt":   "created_at",
		"UpdatedAt":   "updated_at",
	},

	ReverseMap: map[string]string{
		"id":           "Id",
		"project_id":   "ProjectId",
		"name":         "Name",
		"key_prefix":   "KeyPrefix",
		"secret_hash":  "SecretHash",
		"permissions":  "Permissions",
		"last_used_at": "LastUsedAt",
		"expires_at":   "ExpiresAt",
		"created_at":   "CreatedAt",
		"updated_at":   "UpdatedAt",
	},

	PrimaryKeys: []string{
		"id",
	},

	Relationships: map[string]*orm.RelationshipMetadata{
		"Project": {
			Name:       "Project",
			Type:       "belongs_to",
			Target:     "Project",
			ForeignKey: "project_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*ApiKey).Project = value.(*Project)
			},
			IsSlice: false,
		},
		"AuditLogs": {
			Name:       "AuditLogs",
			Type:       "has_many",
			Target:     "AuditLog",
			ForeignKey: "api_key_id",
			SourceKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*ApiKey).AuditLogs = value.([]AuditLog)
			},
			IsSlice: true,
		},
	},
}
