//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: models
// Model: Pipeline
// Generated on: 2025-07-16 21:12:15 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=models
//
// For more information, see:
//   https://github.com/eleven-am/storm

package models

import (
	"github.com/eleven-am/storm/internal/orm"
)

// PipelineMetadata provides compile-time metadata for Pipeline
var PipelineMetadata = &orm.ModelMetadata{
	TableName:  "pipelines",
	StructName: "Pipeline",

	Columns: map[string]*orm.ColumnMetadata{
		"Id": {
			FieldName:       "Id",
			DBName:          "id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    true,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Pipeline)
				return m.Id
			},
		},
		"ProjectId": {
			FieldName:       "ProjectId",
			DBName:          "project_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Pipeline)
				return m.ProjectId
			},
		},
		"Name": {
			FieldName:       "Name",
			DBName:          "name",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Pipeline)
				return m.Name
			},
		},
		"Description": {
			FieldName:       "Description",
			DBName:          "description",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Pipeline)
				return m.Description
			},
		},
		"Version": {
			FieldName:       "Version",
			DBName:          "version",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Pipeline)
				return m.Version
			},
		},
		"IsActive": {
			FieldName:       "IsActive",
			DBName:          "is_active",
			GoType:          "bool",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Pipeline)
				return m.IsActive
			},
		},
		"DlqBrokerId": {
			FieldName:       "DlqBrokerId",
			DBName:          "dlq_broker_id",
			GoType:          "string",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Pipeline)
				if m.DlqBrokerId != nil {
					return *m.DlqBrokerId
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(Pipeline).DlqBrokerId == nil
			},
		},
		"Metadata": {
			FieldName:       "Metadata",
			DBName:          "metadata",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Pipeline)
				return m.Metadata
			},
		},
		"Config": {
			FieldName:       "Config",
			DBName:          "config",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Pipeline)
				return m.Config
			},
		},
		"CreatedAt": {
			FieldName:       "CreatedAt",
			DBName:          "created_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Pipeline)
				return m.CreatedAt
			},
		},
		"UpdatedAt": {
			FieldName:       "UpdatedAt",
			DBName:          "updated_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Pipeline)
				return m.UpdatedAt
			},
		},
	},

	ColumnMap: map[string]string{
		"Id":          "id",
		"ProjectId":   "project_id",
		"Name":        "name",
		"Description": "description",
		"Version":     "version",
		"IsActive":    "is_active",
		"DlqBrokerId": "dlq_broker_id",
		"Metadata":    "metadata",
		"Config":      "config",
		"CreatedAt":   "created_at",
		"UpdatedAt":   "updated_at",
	},

	ReverseMap: map[string]string{
		"id":            "Id",
		"project_id":    "ProjectId",
		"name":          "Name",
		"description":   "Description",
		"version":       "Version",
		"is_active":     "IsActive",
		"dlq_broker_id": "DlqBrokerId",
		"metadata":      "Metadata",
		"config":        "Config",
		"created_at":    "CreatedAt",
		"updated_at":    "UpdatedAt",
	},

	PrimaryKeys: []string{
		"id",
	},

	Relationships: map[string]*orm.RelationshipMetadata{
		"DlqBroker": {
			Name:       "DlqBroker",
			Type:       "belongs_to",
			Target:     "Broker",
			ForeignKey: "dlq_broker_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Pipeline).DlqBroker = value.(*Broker)
			},
			IsSlice: false,
		},
		"Project": {
			Name:       "Project",
			Type:       "belongs_to",
			Target:     "Project",
			ForeignKey: "project_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Pipeline).Project = value.(*Project)
			},
			IsSlice: false,
		},
		"Stages": {
			Name:       "Stages",
			Type:       "has_many",
			Target:     "Stage",
			ForeignKey: "pipeline_id",
			SourceKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Pipeline).Stages = value.([]Stage)
			},
			IsSlice: true,
		},
		"DlqMessages": {
			Name:       "DlqMessages",
			Type:       "has_many",
			Target:     "DlqMessage",
			ForeignKey: "pipeline_id",
			SourceKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Pipeline).DlqMessages = value.([]DlqMessage)
			},
			IsSlice: true,
		},
		"PipelineEvents": {
			Name:       "PipelineEvents",
			Type:       "has_many",
			Target:     "PipelineEvent",
			ForeignKey: "pipeline_id",
			SourceKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Pipeline).PipelineEvents = value.([]PipelineEvent)
			},
			IsSlice: true,
		},
		"ExecutionLogs": {
			Name:       "ExecutionLogs",
			Type:       "has_many",
			Target:     "ExecutionLog",
			ForeignKey: "pipeline_id",
			SourceKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Pipeline).ExecutionLogs = value.([]ExecutionLog)
			},
			IsSlice: true,
		},
	},
}
