//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: models
// Model: PipelineEvent
// Generated on: 2025-07-16 21:12:15 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=models
//
// For more information, see:
//   https://github.com/eleven-am/storm

package models

import (
	"github.com/eleven-am/storm/internal/orm"
)

// PipelineEventMetadata provides compile-time metadata for PipelineEvent
var PipelineEventMetadata = &orm.ModelMetadata{
	TableName:  "pipeline_events",
	StructName: "PipelineEvent",

	Columns: map[string]*orm.ColumnMetadata{
		"Timestamp": {
			FieldName:       "Timestamp",
			DBName:          "timestamp",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				return m.Timestamp
			},
		},
		"CreatedAt": {
			FieldName:       "CreatedAt",
			DBName:          "created_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				return m.CreatedAt
			},
		},
		"MemoryUsageBytes": {
			FieldName:       "MemoryUsageBytes",
			DBName:          "memory_usage_bytes",
			GoType:          "int64",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				if m.MemoryUsageBytes != nil {
					return *m.MemoryUsageBytes
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(PipelineEvent).MemoryUsageBytes == nil
			},
		},
		"DurationMs": {
			FieldName:       "DurationMs",
			DBName:          "duration_ms",
			GoType:          "int64",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				if m.DurationMs != nil {
					return *m.DurationMs
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(PipelineEvent).DurationMs == nil
			},
		},
		"StageLevel": {
			FieldName:       "StageLevel",
			DBName:          "stage_level",
			GoType:          "int32",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				if m.StageLevel != nil {
					return *m.StageLevel
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(PipelineEvent).StageLevel == nil
			},
		},
		"StageType": {
			FieldName:       "StageType",
			DBName:          "stage_type",
			GoType:          "string",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				if m.StageType != nil {
					return *m.StageType
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(PipelineEvent).StageType == nil
			},
		},
		"EventVersion": {
			FieldName:       "EventVersion",
			DBName:          "event_version",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				return m.EventVersion
			},
		},
		"StageId": {
			FieldName:       "StageId",
			DBName:          "stage_id",
			GoType:          "string",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				if m.StageId != nil {
					return *m.StageId
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(PipelineEvent).StageId == nil
			},
		},
		"Id": {
			FieldName:       "Id",
			DBName:          "id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    true,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				return m.Id
			},
		},
		"EventType": {
			FieldName:       "EventType",
			DBName:          "event_type",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				return m.EventType
			},
		},
		"Status": {
			FieldName:       "Status",
			DBName:          "status",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				return m.Status
			},
		},
		"InputData": {
			FieldName:       "InputData",
			DBName:          "input_data",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				return m.InputData
			},
		},
		"OutputData": {
			FieldName:       "OutputData",
			DBName:          "output_data",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				return m.OutputData
			},
		},
		"ErrorDetails": {
			FieldName:       "ErrorDetails",
			DBName:          "error_details",
			GoType:          "",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				if m.ErrorDetails != nil {
					return *m.ErrorDetails
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(PipelineEvent).ErrorDetails == nil
			},
		},
		"Metadata": {
			FieldName:       "Metadata",
			DBName:          "metadata",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				return m.Metadata
			},
		},
		"ProjectId": {
			FieldName:       "ProjectId",
			DBName:          "project_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				return m.ProjectId
			},
		},
		"PipelineId": {
			FieldName:       "PipelineId",
			DBName:          "pipeline_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				return m.PipelineId
			},
		},
		"ExecutionId": {
			FieldName:       "ExecutionId",
			DBName:          "execution_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(PipelineEvent)
				return m.ExecutionId
			},
		},
	},

	ColumnMap: map[string]string{
		"Timestamp":        "timestamp",
		"CreatedAt":        "created_at",
		"MemoryUsageBytes": "memory_usage_bytes",
		"DurationMs":       "duration_ms",
		"StageLevel":       "stage_level",
		"StageType":        "stage_type",
		"EventVersion":     "event_version",
		"StageId":          "stage_id",
		"Id":               "id",
		"EventType":        "event_type",
		"Status":           "status",
		"InputData":        "input_data",
		"OutputData":       "output_data",
		"ErrorDetails":     "error_details",
		"Metadata":         "metadata",
		"ProjectId":        "project_id",
		"PipelineId":       "pipeline_id",
		"ExecutionId":      "execution_id",
	},

	ReverseMap: map[string]string{
		"timestamp":          "Timestamp",
		"created_at":         "CreatedAt",
		"memory_usage_bytes": "MemoryUsageBytes",
		"duration_ms":        "DurationMs",
		"stage_level":        "StageLevel",
		"stage_type":         "StageType",
		"event_version":      "EventVersion",
		"stage_id":           "StageId",
		"id":                 "Id",
		"event_type":         "EventType",
		"status":             "Status",
		"input_data":         "InputData",
		"output_data":        "OutputData",
		"error_details":      "ErrorDetails",
		"metadata":           "Metadata",
		"project_id":         "ProjectId",
		"pipeline_id":        "PipelineId",
		"execution_id":       "ExecutionId",
	},

	PrimaryKeys: []string{
		"id",
	},

	Relationships: map[string]*orm.RelationshipMetadata{
		"Pipeline": {
			Name:       "Pipeline",
			Type:       "belongs_to",
			Target:     "Pipeline",
			ForeignKey: "pipeline_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*PipelineEvent).Pipeline = value.(*Pipeline)
			},
			IsSlice: false,
		},
		"Project": {
			Name:       "Project",
			Type:       "belongs_to",
			Target:     "Project",
			ForeignKey: "project_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*PipelineEvent).Project = value.(*Project)
			},
			IsSlice: false,
		},
	},
}
