//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: models
// Model: Stage
// Generated on: 2025-07-16 21:12:15 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=models
//
// For more information, see:
//   https://github.com/eleven-am/storm

package models

import (
	"github.com/eleven-am/storm/internal/orm"
)

// StageMetadata provides compile-time metadata for Stage
var StageMetadata = &orm.ModelMetadata{
	TableName:  "stages",
	StructName: "Stage",

	Columns: map[string]*orm.ColumnMetadata{
		"Id": {
			FieldName:       "Id",
			DBName:          "id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    true,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Stage)
				return m.Id
			},
		},
		"PipelineId": {
			FieldName:       "PipelineId",
			DBName:          "pipeline_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Stage)
				return m.PipelineId
			},
		},
		"StageId": {
			FieldName:       "StageId",
			DBName:          "stage_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Stage)
				return m.StageId
			},
		},
		"Type": {
			FieldName:       "Type",
			DBName:          "type",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Stage)
				return m.Type
			},
		},
		"Action": {
			FieldName:       "Action",
			DBName:          "action",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Stage)
				return m.Action
			},
		},
		"Target": {
			FieldName:       "Target",
			DBName:          "target",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Stage)
				return m.Target
			},
		},
		"DependsOn": {
			FieldName:       "DependsOn",
			DBName:          "depends_on",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Stage)
				return m.DependsOn
			},
		},
		"Filter": {
			FieldName:       "Filter",
			DBName:          "filter",
			GoType:          "string",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Stage)
				if m.Filter != nil {
					return *m.Filter
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(Stage).Filter == nil
			},
		},
		"Timeout": {
			FieldName:       "Timeout",
			DBName:          "timeout",
			GoType:          "time.Duration",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Stage)
				if m.Timeout != nil {
					return *m.Timeout
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(Stage).Timeout == nil
			},
		},
		"CacheConfig": {
			FieldName:       "CacheConfig",
			DBName:          "cache_config",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Stage)
				return m.CacheConfig
			},
		},
		"CreatedAt": {
			FieldName:       "CreatedAt",
			DBName:          "created_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Stage)
				return m.CreatedAt
			},
		},
		"UpdatedAt": {
			FieldName:       "UpdatedAt",
			DBName:          "updated_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Stage)
				return m.UpdatedAt
			},
		},
	},

	ColumnMap: map[string]string{
		"Id":          "id",
		"PipelineId":  "pipeline_id",
		"StageId":     "stage_id",
		"Type":        "type",
		"Action":      "action",
		"Target":      "target",
		"DependsOn":   "depends_on",
		"Filter":      "filter",
		"Timeout":     "timeout",
		"CacheConfig": "cache_config",
		"CreatedAt":   "created_at",
		"UpdatedAt":   "updated_at",
	},

	ReverseMap: map[string]string{
		"id":           "Id",
		"pipeline_id":  "PipelineId",
		"stage_id":     "StageId",
		"type":         "Type",
		"action":       "Action",
		"target":       "Target",
		"depends_on":   "DependsOn",
		"filter":       "Filter",
		"timeout":      "Timeout",
		"cache_config": "CacheConfig",
		"created_at":   "CreatedAt",
		"updated_at":   "UpdatedAt",
	},

	PrimaryKeys: []string{
		"id",
	},

	Relationships: map[string]*orm.RelationshipMetadata{
		"Pipeline": {
			Name:       "Pipeline",
			Type:       "belongs_to",
			Target:     "Pipeline",
			ForeignKey: "pipeline_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Stage).Pipeline = value.(*Pipeline)
			},
			IsSlice: false,
		},
	},
}
