//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: models
// Model: Trigger
// Generated on: 2025-07-16 21:12:15 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=models
//
// For more information, see:
//   https://github.com/eleven-am/storm

package models

import (
	"github.com/eleven-am/storm/internal/orm"
)

// TriggerMetadata provides compile-time metadata for Trigger
var TriggerMetadata = &orm.ModelMetadata{
	TableName:  "triggers",
	StructName: "Trigger",

	Columns: map[string]*orm.ColumnMetadata{
		"Id": {
			FieldName:       "Id",
			DBName:          "id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    true,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Trigger)
				return m.Id
			},
		},
		"ProjectId": {
			FieldName:       "ProjectId",
			DBName:          "project_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Trigger)
				return m.ProjectId
			},
		},
		"PipelineIds": {
			FieldName:       "PipelineIds",
			DBName:          "pipeline_ids",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Trigger)
				return m.PipelineIds
			},
		},
		"Name": {
			FieldName:       "Name",
			DBName:          "name",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Trigger)
				return m.Name
			},
		},
		"Type": {
			FieldName:       "Type",
			DBName:          "type",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Trigger)
				return m.Type
			},
		},
		"EntityId": {
			FieldName:       "EntityId",
			DBName:          "entity_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Trigger)
				return m.EntityId
			},
		},
		"IsActive": {
			FieldName:       "IsActive",
			DBName:          "is_active",
			GoType:          "bool",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Trigger)
				return m.IsActive
			},
		},
		"Config": {
			FieldName:       "Config",
			DBName:          "config",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Trigger)
				return m.Config
			},
		},
		"AuthConfig": {
			FieldName:       "AuthConfig",
			DBName:          "auth_config",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Trigger)
				return m.AuthConfig
			},
		},
		"LastTriggeredAt": {
			FieldName:       "LastTriggeredAt",
			DBName:          "last_triggered_at",
			GoType:          "time.Time",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Trigger)
				if m.LastTriggeredAt != nil {
					return *m.LastTriggeredAt
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(Trigger).LastTriggeredAt == nil
			},
		},
		"LastError": {
			FieldName:       "LastError",
			DBName:          "last_error",
			GoType:          "",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Trigger)
				return m.LastError
			},
		},
		"TriggerCount": {
			FieldName:       "TriggerCount",
			DBName:          "trigger_count",
			GoType:          "int64",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Trigger)
				return m.TriggerCount
			},
		},
		"CreatedAt": {
			FieldName:       "CreatedAt",
			DBName:          "created_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Trigger)
				return m.CreatedAt
			},
		},
		"UpdatedAt": {
			FieldName:       "UpdatedAt",
			DBName:          "updated_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Trigger)
				return m.UpdatedAt
			},
		},
	},

	ColumnMap: map[string]string{
		"Id":              "id",
		"ProjectId":       "project_id",
		"PipelineIds":     "pipeline_ids",
		"Name":            "name",
		"Type":            "type",
		"EntityId":        "entity_id",
		"IsActive":        "is_active",
		"Config":          "config",
		"AuthConfig":      "auth_config",
		"LastTriggeredAt": "last_triggered_at",
		"LastError":       "last_error",
		"TriggerCount":    "trigger_count",
		"CreatedAt":       "created_at",
		"UpdatedAt":       "updated_at",
	},

	ReverseMap: map[string]string{
		"id":                "Id",
		"project_id":        "ProjectId",
		"pipeline_ids":      "PipelineIds",
		"name":              "Name",
		"type":              "Type",
		"entity_id":         "EntityId",
		"is_active":         "IsActive",
		"config":            "Config",
		"auth_config":       "AuthConfig",
		"last_triggered_at": "LastTriggeredAt",
		"last_error":        "LastError",
		"trigger_count":     "TriggerCount",
		"created_at":        "CreatedAt",
		"updated_at":        "UpdatedAt",
	},

	PrimaryKeys: []string{
		"id",
	},

	Relationships: map[string]*orm.RelationshipMetadata{
		"Project": {
			Name:       "Project",
			Type:       "belongs_to",
			Target:     "Project",
			ForeignKey: "project_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Trigger).Project = value.(*Project)
			},
			IsSlice: false,
		},
		"DlqMessages": {
			Name:       "DlqMessages",
			Type:       "has_many",
			Target:     "DlqMessage",
			ForeignKey: "trigger_id",
			SourceKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Trigger).DlqMessages = value.([]DlqMessage)
			},
			IsSlice: true,
		},
		"ExecutionLogs": {
			Name:       "ExecutionLogs",
			Type:       "has_many",
			Target:     "ExecutionLog",
			ForeignKey: "trigger_id",
			SourceKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Trigger).ExecutionLogs = value.([]ExecutionLog)
			},
			IsSlice: true,
		},
	},
}
