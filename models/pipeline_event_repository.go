//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: models
// Model: PipelineEvent
// Generated on: 2025-07-16 21:12:15 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=models
//
// For more information, see:
//   https://github.com/eleven-am/storm

package models

import (
	"context"
	"fmt"
	"github.com/eleven-am/storm/internal/orm"
	"github.com/jmoiron/sqlx"
)

// PipelineEventRepository provides type-safe operations for PipelineEvent
// Inherits standard CRUD operations from orm.Repository:
// Find, FindAll, Create, Update, Delete, UpsertMany, BulkUpdate, etc.
type PipelineEventRepository struct {
	*orm.Repository[PipelineEvent]
}

// newPipelineEventRepository creates a new PipelineEvent repository (internal use only - use Storm)
func newPipelineEventRepository(db *sqlx.DB) (*PipelineEventRepository, error) {
	baseRepo, err := orm.NewRepository[PipelineEvent](db, PipelineEventMetadata)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository: %w", err)
	}

	return &PipelineEventRepository{
		Repository: baseRepo,
	}, nil
}

// newPipelineEventRepositoryWithTx creates a new PipelineEvent repository using an existing transaction (internal use only - use Storm)
func newPipelineEventRepositoryWithTx(tx *sqlx.Tx) (*PipelineEventRepository, error) {
	baseRepo, err := orm.NewRepositoryWithTx[PipelineEvent](tx, PipelineEventMetadata)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository with transaction: %w", err)
	}

	return &PipelineEventRepository{
		Repository: baseRepo,
	}, nil
}

// Query returns a type-safe query builder for PipelineEvent
//
// Example:
//
//	filteredPipelineEvents, err := repo.Query().
//	    Where(PipelineEvents.StageType.Like("%search%")).
//	    OrderBy(PipelineEvents.Timestamp.Desc()).
//	    Limit(10).
//	    Find()
func (r *PipelineEventRepository) Query() *PipelineEventQuery {
	return &PipelineEventQuery{
		Query: r.Repository.Query(),
		repo:  r,
	}
}

// QueryContext returns a type-safe query builder for PipelineEvent with context
//
// Example:
//
//	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
//	defer cancel()
//	results, err := repo.QueryContext(ctx).
//	    Limit(100).
//	    Find()
func (r *PipelineEventRepository) QueryContext(ctx context.Context) *PipelineEventQuery {
	return &PipelineEventQuery{
		Query: r.Repository.QueryContext(ctx),
		repo:  r,
	}
}

// WithPipeline includes the Pipeline relationship in queries
//
// Example:
//
//	pipelineeventWithOwner, err := repo.WithPipeline().Find()
//	// Each PipelineEvent will have its Pipeline loaded
func (r *PipelineEventRepository) WithPipeline() *PipelineEventQuery {
	return &PipelineEventQuery{
		Query: r.Repository.Query().Include("Pipeline"),
		repo:  r,
	}
}

// WithProject includes the Project relationship in queries
//
// Example:
//
//	pipelineeventWithOwner, err := repo.WithProject().Find()
//	// Each PipelineEvent will have its Project loaded
func (r *PipelineEventRepository) WithProject() *PipelineEventQuery {
	return &PipelineEventQuery{
		Query: r.Repository.Query().Include("Project"),
		repo:  r,
	}
}

// PipelineEventQuery provides type-safe query building for PipelineEvent
type PipelineEventQuery struct {
	*orm.Query[PipelineEvent]
	repo *PipelineEventRepository
}

// Where adds a type-safe WHERE condition
func (q *PipelineEventQuery) Where(condition orm.Condition) *PipelineEventQuery {
	q.Query = q.Query.Where(condition)
	return q
}

// OrderBy adds ordering to the query
func (q *PipelineEventQuery) OrderBy(expressions ...string) *PipelineEventQuery {
	q.Query = q.Query.OrderBy(expressions...)
	return q
}

// Limit sets the LIMIT clause
func (q *PipelineEventQuery) Limit(limit uint64) *PipelineEventQuery {
	q.Query = q.Query.Limit(limit)
	return q
}

// Offset sets the OFFSET clause
func (q *PipelineEventQuery) Offset(offset uint64) *PipelineEventQuery {
	q.Query = q.Query.Offset(offset)
	return q
}

// Find executes the query and returns all matching records
func (q *PipelineEventQuery) Find() ([]PipelineEvent, error) {
	return q.Query.Find()
}

// First executes the query and returns the first matching record
func (q *PipelineEventQuery) First() (*PipelineEvent, error) {
	return q.Query.First()
}

// Count executes the query and returns the count of matching records
func (q *PipelineEventQuery) Count() (int64, error) {
	return q.Query.Count()
}

// Exists executes the query and returns true if any records match
func (q *PipelineEventQuery) Exists() (bool, error) {
	return q.Query.Exists()
}

// Delete executes the query and deletes all matching records
func (q *PipelineEventQuery) Delete() (int64, error) {
	return q.Query.Delete()
}
