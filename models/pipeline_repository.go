//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: models
// Model: Pipeline
// Generated on: 2025-07-16 21:12:15 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=models
//
// For more information, see:
//   https://github.com/eleven-am/storm

package models

import (
	"context"
	"fmt"
	"github.com/eleven-am/storm/internal/orm"
	"github.com/jmoiron/sqlx"
)

// PipelineRepository provides type-safe operations for Pipeline
// Inherits standard CRUD operations from orm.Repository:
// Find, FindAll, Create, Update, Delete, UpsertMany, BulkUpdate, etc.
type PipelineRepository struct {
	*orm.Repository[Pipeline]
}

// newPipelineRepository creates a new Pipeline repository (internal use only - use Storm)
func newPipelineRepository(db *sqlx.DB) (*PipelineRepository, error) {
	baseRepo, err := orm.NewRepository[Pipeline](db, PipelineMetadata)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository: %w", err)
	}

	return &PipelineRepository{
		Repository: baseRepo,
	}, nil
}

// newPipelineRepositoryWithTx creates a new Pipeline repository using an existing transaction (internal use only - use Storm)
func newPipelineRepositoryWithTx(tx *sqlx.Tx) (*PipelineRepository, error) {
	baseRepo, err := orm.NewRepositoryWithTx[Pipeline](tx, PipelineMetadata)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository with transaction: %w", err)
	}

	return &PipelineRepository{
		Repository: baseRepo,
	}, nil
}

// Query returns a type-safe query builder for Pipeline
//
// Example:
//
//	activePipelines, err := repo.Query().
//	    Where(Pipelines.IsActive.Eq(true)).
//	    OrderBy(Pipelines.Id.Desc()).
//	    Limit(10).
//	    Find()
func (r *PipelineRepository) Query() *PipelineQuery {
	return &PipelineQuery{
		Query: r.Repository.Query(),
		repo:  r,
	}
}

// QueryContext returns a type-safe query builder for Pipeline with context
//
// Example:
//
//	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
//	defer cancel()
//	results, err := repo.QueryContext(ctx).
//	    Limit(100).
//	    Find()
func (r *PipelineRepository) QueryContext(ctx context.Context) *PipelineQuery {
	return &PipelineQuery{
		Query: r.Repository.QueryContext(ctx),
		repo:  r,
	}
}

// WithDlqBroker includes the DlqBroker relationship in queries
//
// Example:
//
//	pipelineWithOwner, err := repo.WithDlqBroker().Find()
//	// Each Pipeline will have its DlqBroker loaded
func (r *PipelineRepository) WithDlqBroker() *PipelineQuery {
	return &PipelineQuery{
		Query: r.Repository.Query().Include("DlqBroker"),
		repo:  r,
	}
}

// WithProject includes the Project relationship in queries
//
// Example:
//
//	pipelineWithOwner, err := repo.WithProject().Find()
//	// Each Pipeline will have its Project loaded
func (r *PipelineRepository) WithProject() *PipelineQuery {
	return &PipelineQuery{
		Query: r.Repository.Query().Include("Project"),
		repo:  r,
	}
}

// WithStages includes the Stages relationship in queries
//
// Example:
//
//	pipelineWithAllStages, err := repo.WithStages().Find()
//	// Each Pipeline will have its Stages slice populated
func (r *PipelineRepository) WithStages() *PipelineQuery {
	return &PipelineQuery{
		Query: r.Repository.Query().Include("Stages"),
		repo:  r,
	}
}

// WithDlqMessages includes the DlqMessages relationship in queries
//
// Example:
//
//	pipelineWithAllDlqMessages, err := repo.WithDlqMessages().Find()
//	// Each Pipeline will have its DlqMessages slice populated
func (r *PipelineRepository) WithDlqMessages() *PipelineQuery {
	return &PipelineQuery{
		Query: r.Repository.Query().Include("DlqMessages"),
		repo:  r,
	}
}

// WithPipelineEvents includes the PipelineEvents relationship in queries
//
// Example:
//
//	pipelineWithAllPipelineEvents, err := repo.WithPipelineEvents().Find()
//	// Each Pipeline will have its PipelineEvents slice populated
func (r *PipelineRepository) WithPipelineEvents() *PipelineQuery {
	return &PipelineQuery{
		Query: r.Repository.Query().Include("PipelineEvents"),
		repo:  r,
	}
}

// WithExecutionLogs includes the ExecutionLogs relationship in queries
//
// Example:
//
//	pipelineWithAllExecutionLogs, err := repo.WithExecutionLogs().Find()
//	// Each Pipeline will have its ExecutionLogs slice populated
func (r *PipelineRepository) WithExecutionLogs() *PipelineQuery {
	return &PipelineQuery{
		Query: r.Repository.Query().Include("ExecutionLogs"),
		repo:  r,
	}
}

// PipelineQuery provides type-safe query building for Pipeline
type PipelineQuery struct {
	*orm.Query[Pipeline]
	repo *PipelineRepository
}

// Where adds a type-safe WHERE condition
func (q *PipelineQuery) Where(condition orm.Condition) *PipelineQuery {
	q.Query = q.Query.Where(condition)
	return q
}

// OrderBy adds ordering to the query
func (q *PipelineQuery) OrderBy(expressions ...string) *PipelineQuery {
	q.Query = q.Query.OrderBy(expressions...)
	return q
}

// Limit sets the LIMIT clause
func (q *PipelineQuery) Limit(limit uint64) *PipelineQuery {
	q.Query = q.Query.Limit(limit)
	return q
}

// Offset sets the OFFSET clause
func (q *PipelineQuery) Offset(offset uint64) *PipelineQuery {
	q.Query = q.Query.Offset(offset)
	return q
}

// Find executes the query and returns all matching records
func (q *PipelineQuery) Find() ([]Pipeline, error) {
	return q.Query.Find()
}

// First executes the query and returns the first matching record
func (q *PipelineQuery) First() (*Pipeline, error) {
	return q.Query.First()
}

// Count executes the query and returns the count of matching records
func (q *PipelineQuery) Count() (int64, error) {
	return q.Query.Count()
}

// Exists executes the query and returns true if any records match
func (q *PipelineQuery) Exists() (bool, error) {
	return q.Query.Exists()
}

// Delete executes the query and deletes all matching records
func (q *PipelineQuery) Delete() (int64, error) {
	return q.Query.Delete()
}
