//go:build !exclude_generated
// +build !exclude_generated

// Code generated by db-migrator introspect; DO NOT EDIT.
//
// This file was automatically generated from the database schema.
// Any changes made to this file will be lost when regenerating.
//
// Source database: flow_v2
// Tables found: 19
// Generated on: 2025-07-19 11:00:08 CEST
//
// To regenerate this file, run:
//   db-migrator introspect --database="<connection-url>" --format=go --package=models
//
// For more information, see:
//   https://github.com/eleven-am/storm

package models

import (
	storm "github.com/eleven-am/storm/pkg/storm-orm"
	"time"
)

// ApiKey represents the api_keys table
type ApiKey struct {
	_ struct{} `storm:"table:api_keys;index:idx_api_keys_project_id,project_id;index:idx_api_keys_user_id,user_id;unique:api_keys_key_prefix_key,key_prefix"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	ProjectId string `db:"project_id" storm:"column:project_id;type:char(25);not_null;foreign_key:projects.id;on_delete:CASCADE"`
	UserId string `db:"user_id" storm:"column:user_id;type:char(25);not_null;foreign_key:users.id;on_delete:CASCADE"`
	Name string `db:"name" storm:"column:name;type:text;not_null"`
	KeyPrefix string `db:"key_prefix" storm:"column:key_prefix;type:varchar(12);not_null;unique"`
	SecretHash string `db:"secret_hash" storm:"column:secret_hash;type:text;not_null"`
	Permissions storm.StringArray `db:"permissions" storm:"column:permissions;type:text[];default:'{}'"`
	LastUsedAt *time.Time `db:"last_used_at" storm:"column:last_used_at;type:timestamptz"`
	ExpiresAt *time.Time `db:"expires_at" storm:"column:expires_at;type:timestamptz"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	UpdatedAt time.Time  `db:"updated_at" storm:"column:updated_at;type:timestamptz;not_null;default:now()"`
	Project *Project     `storm:"relation:belongs_to:Project;foreign_key:project_id;target_key:id"`
	User *User           `storm:"relation:belongs_to:User;foreign_key:user_id;target_key:id"`
	AuditLogs []AuditLog `storm:"relation:has_many:AuditLog;foreign_key:api_key_id;source_key:id"`
}

// AuditLog represents the audit_logs table
type AuditLog struct {
	_ struct{} `storm:"table:audit_logs;index:idx_audit_logs_created_at,created_at;index:idx_audit_logs_entity,entity_type,entity_id;index:idx_audit_logs_team_id,team_id;index:idx_audit_logs_user_id,user_id"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	TeamId *string `db:"team_id" storm:"column:team_id;type:char(25);foreign_key:teams.id;on_delete:CASCADE"`
	UserId *string `db:"user_id" storm:"column:user_id;type:char(25);foreign_key:users.id;on_delete:CASCADE"`
	Action string `db:"action" storm:"column:action;type:varchar(100);not_null"`
	EntityType string `db:"entity_type" storm:"column:entity_type;type:varchar(50);not_null"`
	EntityId string `db:"entity_id" storm:"column:entity_id;type:varchar(255);not_null"`
	Success bool `db:"success" storm:"column:success;type:boolean;not_null;default:true"`
	ErrorMessage *string `db:"error_message" storm:"column:error_message;type:text"`
	IpAddress string `db:"ip_address" storm:"column:ip_address;type:inet;not_null"`
	UserAgent string `db:"user_agent" storm:"column:user_agent;type:text;not_null"`
	ApiKeyId *string `db:"api_key_id" storm:"column:api_key_id;type:char(25);foreign_key:api_keys.id;on_delete:CASCADE"`
	CorrelationId *string `db:"correlation_id" storm:"column:correlation_id;type:uuid"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	ApiKey *ApiKey      `storm:"relation:belongs_to:ApiKey;foreign_key:api_key_id;target_key:id"`
	Team *Team          `storm:"relation:belongs_to:Team;foreign_key:team_id;target_key:id"`
	User *User          `storm:"relation:belongs_to:User;foreign_key:user_id;target_key:id"`
}

// AuthCredential represents the auth_credentials table
type AuthCredential struct {
	_ struct{} `storm:"table:auth_credentials;index:idx_auth_credentials_project_id,project_id"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	ProjectId string `db:"project_id" storm:"column:project_id;type:char(25);not_null;foreign_key:projects.id;on_delete:CASCADE"`
	Name string `db:"name" storm:"column:name;type:text;not_null"`
	Description string `db:"description" storm:"column:description;type:text;not_null;default:''"`
	Type string `db:"type" storm:"column:type;type:varchar(50);not_null"`
	Data string `db:"data" storm:"column:data;type:text;not_null"`
	ExpiresAt *time.Time `db:"expires_at" storm:"column:expires_at;type:timestamptz"`
	Revoked bool `db:"revoked" storm:"column:revoked;type:boolean;not_null;default:false"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	UpdatedAt time.Time `db:"updated_at" storm:"column:updated_at;type:timestamptz;not_null;default:now()"`
	Project *Project    `storm:"relation:belongs_to:Project;foreign_key:project_id;target_key:id"`
}

// Broker represents the brokers table
type Broker struct {
	_ struct{} `storm:"table:brokers;index:idx_brokers_active,is_active,type where:(is_active = true);index:idx_brokers_project_id,project_id;index:idx_brokers_type,type"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	ProjectId string `db:"project_id" storm:"column:project_id;type:char(25);not_null;foreign_key:projects.id;on_delete:CASCADE"`
	Name string `db:"name" storm:"column:name;type:varchar(255);not_null"`
	Type string `db:"type" storm:"column:type;type:varchar(50);not_null"`
	Description *string `db:"description" storm:"column:description;type:text"`
	IsActive bool `db:"is_active" storm:"column:is_active;type:boolean;not_null;default:true"`
	Config storm.JSONData `db:"config" storm:"column:config;type:jsonb;not_null;default:'{}'"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	UpdatedAt time.Time  `db:"updated_at" storm:"column:updated_at;type:timestamptz;not_null;default:now()"`
	Project *Project     `storm:"relation:belongs_to:Project;foreign_key:project_id;target_key:id"`
}

// DlqMessage represents the dlq_messages table
type DlqMessage struct {
	_ struct{} `storm:"table:dlq_messages;index:idx_dlq_messages_failure_count,failure_count;index:idx_dlq_messages_next_retry,next_retry;index:idx_dlq_messages_pipeline_id,pipeline_id;index:idx_dlq_messages_status,status;index:idx_dlq_messages_trigger_id,trigger_id;unique:dlq_messages_message_id_key,message_id"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	MessageId string `db:"message_id" storm:"column:message_id;type:varchar(255);not_null;unique"`
	PipelineId string `db:"pipeline_id" storm:"column:pipeline_id;type:char(25);not_null;foreign_key:pipelines.id;on_delete:CASCADE"`
	TriggerId string `db:"trigger_id" storm:"column:trigger_id;type:char(25);not_null;foreign_key:triggers.id;on_delete:CASCADE"`
	Queue string `db:"queue" storm:"column:queue;type:varchar(255);not_null"`
	RoutingKey string `db:"routing_key" storm:"column:routing_key;type:varchar(255);not_null;default:''"`
	Headers storm.JSONData `db:"headers" storm:"column:headers;type:jsonb;not_null;default:'{}'"`
	Body []byte `db:"body" storm:"column:body;type:bytea;not_null"`
	ErrorMessage string `db:"error_message" storm:"column:error_message;type:text;not_null"`
	FailureCount int32 `db:"failure_count" storm:"column:failure_count;type:integer;not_null;default:1"`
	FirstFailure time.Time `db:"first_failure" storm:"column:first_failure;type:timestamptz;not_null;default:now()"`
	LastFailure time.Time `db:"last_failure" storm:"column:last_failure;type:timestamptz;not_null;default:now()"`
	NextRetry *time.Time `db:"next_retry" storm:"column:next_retry;type:timestamptz"`
	Status string `db:"status" storm:"column:status;type:varchar(50);not_null;default:'pending'"`
	Metadata storm.JSONData `db:"metadata" storm:"column:metadata;type:jsonb;not_null;default:'{}'"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	UpdatedAt time.Time `db:"updated_at" storm:"column:updated_at;type:timestamptz;not_null;default:now()"`
	Pipeline *Pipeline  `storm:"relation:belongs_to:Pipeline;foreign_key:pipeline_id;target_key:id"`
	Trigger *Trigger    `storm:"relation:belongs_to:Trigger;foreign_key:trigger_id;target_key:id"`
}

// ExecutionLog represents the execution_logs table
type ExecutionLog struct {
	_ struct{} `storm:"table:execution_logs;index:idx_execution_logs_correlation_id,correlation_id;index:idx_execution_logs_pipeline_id,pipeline_id;index:idx_execution_logs_project_id,project_id;index:idx_execution_logs_started_at,started_at;index:idx_execution_logs_status,status;index:idx_execution_logs_trigger_id,trigger_id"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	ProjectId string `db:"project_id" storm:"column:project_id;type:char(25);not_null;foreign_key:projects.id;on_delete:CASCADE"`
	CorrelationId string `db:"correlation_id" storm:"column:correlation_id;type:uuid;not_null"`
	TriggerId string `db:"trigger_id" storm:"column:trigger_id;type:char(25);not_null;foreign_key:triggers.id;on_delete:CASCADE"`
	PipelineId string `db:"pipeline_id" storm:"column:pipeline_id;type:char(25);not_null;foreign_key:pipelines.id;on_delete:CASCADE"`
	Status string `db:"status" storm:"column:status;type:varchar(50);not_null"`
	StartedAt time.Time `db:"started_at" storm:"column:started_at;type:timestamptz;not_null;default:now()"`
	CompletedAt *time.Time `db:"completed_at" storm:"column:completed_at;type:timestamptz"`
	ErrorMessage *string `db:"error_message" storm:"column:error_message;type:text"`
	WorkflowId string `db:"workflow_id" storm:"column:workflow_id;type:varchar(255);not_null"`
	RunId string `db:"run_id" storm:"column:run_id;type:varchar(255);not_null"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	Pipeline *Pipeline  `storm:"relation:belongs_to:Pipeline;foreign_key:pipeline_id;target_key:id"`
	Project *Project    `storm:"relation:belongs_to:Project;foreign_key:project_id;target_key:id"`
	Trigger *Trigger    `storm:"relation:belongs_to:Trigger;foreign_key:trigger_id;target_key:id"`
}

// OauthToken represents the oauth_tokens table
type OauthToken struct {
	_ struct{} `storm:"table:oauth_tokens;index:idx_oauth_tokens_project_id,project_id;index:idx_oauth_tokens_service_purpose,service,purpose"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	ProjectId string `db:"project_id" storm:"column:project_id;type:char(25);not_null;foreign_key:projects.id;on_delete:CASCADE"`
	Service string `db:"service" storm:"column:service;type:text;not_null"`
	Purpose string `db:"purpose" storm:"column:purpose;type:text;not_null"`
	RedirectUrl string `db:"redirect_url" storm:"column:redirect_url;type:text;not_null"`
	ClientId string `db:"client_id" storm:"column:client_id;type:text;not_null"`
	ClientSecret string `db:"client_secret" storm:"column:client_secret;type:text;not_null"`
	AccessToken string `db:"access_token" storm:"column:access_token;type:text;not_null"`
	RefreshToken *string `db:"refresh_token" storm:"column:refresh_token;type:text"`
	TokenType string `db:"token_type" storm:"column:token_type;type:text;not_null;default:'Bearer'"`
	IdToken *string `db:"id_token" storm:"column:id_token;type:text"`
	ExpiresAt time.Time `db:"expires_at" storm:"column:expires_at;type:timestamptz;not_null"`
	LastRefreshedAt *time.Time `db:"last_refreshed_at" storm:"column:last_refreshed_at;type:timestamptz"`
	Scopes storm.StringArray `db:"scopes" storm:"column:scopes;type:text[];default:'{}'"`
	Email *string `db:"email" storm:"column:email;type:text"`
	Metadata *storm.JSONData `db:"metadata" storm:"column:metadata;type:jsonb;default:'{}'"`
	Config *storm.JSONData `db:"config" storm:"column:config;type:jsonb;default:'{}'"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	UpdatedAt time.Time `db:"updated_at" storm:"column:updated_at;type:timestamptz;not_null;default:now()"`
	Project *Project    `storm:"relation:belongs_to:Project;foreign_key:project_id;target_key:id"`
}

// PipelineEvent represents the pipeline_events table
type PipelineEvent struct {
	_ struct{} `storm:"table:pipeline_events;index:idx_events_execution,execution_id;index:idx_events_pipeline,pipeline_id;index:idx_events_project,project_id;index:idx_events_timestamp,timestamp;index:idx_events_type,event_type"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	ExecutionId string `db:"execution_id" storm:"column:execution_id;type:varchar(100);not_null"`
	PipelineId string `db:"pipeline_id" storm:"column:pipeline_id;type:char(25);not_null;foreign_key:pipelines.id;on_delete:CASCADE"`
	ProjectId string `db:"project_id" storm:"column:project_id;type:char(25);not_null;foreign_key:projects.id;on_delete:CASCADE"`
	EventType string `db:"event_type" storm:"column:event_type;type:varchar(50);not_null"`
	EventVersion string `db:"event_version" storm:"column:event_version;type:varchar(10);not_null;default:1.0"`
	Timestamp time.Time `db:"timestamp" storm:"column:timestamp;type:timestamptz;not_null;default:now()"`
	StageId *string `db:"stage_id" storm:"column:stage_id;type:varchar(100)"`
	StageType *string `db:"stage_type" storm:"column:stage_type;type:varchar(50)"`
	StageLevel *int32 `db:"stage_level" storm:"column:stage_level;type:integer"`
	Status string `db:"status" storm:"column:status;type:varchar(50);not_null"`
	InputData storm.JSONData `db:"input_data" storm:"column:input_data;type:jsonb;not_null;default:'{}'"`
	OutputData storm.JSONData `db:"output_data" storm:"column:output_data;type:jsonb;not_null;default:'{}'"`
	ErrorDetails *storm.JSONData `db:"error_details" storm:"column:error_details;type:jsonb"`
	Metadata storm.JSONData `db:"metadata" storm:"column:metadata;type:jsonb;not_null;default:'{}'"`
	DurationMs *int64 `db:"duration_ms" storm:"column:duration_ms;type:bigint"`
	MemoryUsageBytes *int64 `db:"memory_usage_bytes" storm:"column:memory_usage_bytes;type:bigint"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	Pipeline *Pipeline  `storm:"relation:belongs_to:Pipeline;foreign_key:pipeline_id;target_key:id"`
	Project *Project    `storm:"relation:belongs_to:Project;foreign_key:project_id;target_key:id"`
}

// Pipeline represents the pipelines table
type Pipeline struct {
	_ struct{} `storm:"table:pipelines;index:idx_pipelines_status,status;index:idx_pipelines_project_id,project_id;unique:uk_pipelines_project_name_version,project_id,name,version"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	ProjectId string `db:"project_id" storm:"column:project_id;type:char(25);not_null;foreign_key:projects.id;on_delete:CASCADE"`
	Name string `db:"name" storm:"column:name;type:varchar(255);not_null"`
	Description string `db:"description" storm:"column:description;type:text;not_null;default:''"`
	Status string `db:"status" storm:"column:status;type:varchar(50);not_null;default:'draft'"`
	Version int `db:"version" storm:"column:version;type:integer;not_null;default:1"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	UpdatedAt time.Time            `db:"updated_at" storm:"column:updated_at;type:timestamptz;not_null;default:now()"`
	Project *Project               `storm:"relation:belongs_to:Project;foreign_key:project_id;target_key:id"`
	PipelineEvents []PipelineEvent `storm:"relation:has_many:PipelineEvent;foreign_key:pipeline_id;source_key:id"`
	DlqMessages []DlqMessage       `storm:"relation:has_many:DlqMessage;foreign_key:pipeline_id;source_key:id"`
	Stages []Stage                 `storm:"relation:has_many:Stage;foreign_key:pipeline_id;source_key:id"`
	ExecutionLogs []ExecutionLog   `storm:"relation:has_many:ExecutionLog;foreign_key:pipeline_id;source_key:id"`
}

// Plan represents the plans table
type Plan struct {
	_ struct{} `storm:"table:plans"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	TriggersPerMinute int32 `db:"triggers_per_minute" storm:"column:triggers_per_minute;type:integer;not_null;default:100"`
	TotalPipelines int32 `db:"total_pipelines" storm:"column:total_pipelines;type:integer;not_null;default:10"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	UpdatedAt time.Time          `db:"updated_at" storm:"column:updated_at;type:timestamptz;not_null;default:now()"`
	Subscriptions []Subscription `storm:"relation:has_many:Subscription;foreign_key:plan_id;source_key:id"`
}

// Project represents the projects table
type Project struct {
	_ struct{} `storm:"table:projects;index:idx_projects_team_id,team_id;unique:uk_projects_team_name,team_id,name;unique:uk_projects_team_name,team_id,name"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	TeamId string `db:"team_id" storm:"column:team_id;type:char(25);not_null;foreign_key:teams.id;on_delete:CASCADE"`
	Name string `db:"name" storm:"column:name;type:text;not_null"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	UpdatedAt time.Time              `db:"updated_at" storm:"column:updated_at;type:timestamptz;not_null;default:now()"`
	Team *Team                       `storm:"relation:belongs_to:Team;foreign_key:team_id;target_key:id"`
	ApiKeys []ApiKey                 `storm:"relation:has_many:ApiKey;foreign_key:project_id;source_key:id"`
	AuthCredentials []AuthCredential `storm:"relation:has_many:AuthCredential;foreign_key:project_id;source_key:id"`
	PipelineEvents []PipelineEvent   `storm:"relation:has_many:PipelineEvent;foreign_key:project_id;source_key:id"`
	Triggers []Trigger               `storm:"relation:has_many:Trigger;foreign_key:project_id;source_key:id"`
	Brokers []Broker                 `storm:"relation:has_many:Broker;foreign_key:project_id;source_key:id"`
	ExecutionLogs []ExecutionLog     `storm:"relation:has_many:ExecutionLog;foreign_key:project_id;source_key:id"`
	OauthTokens []OauthToken         `storm:"relation:has_many:OauthToken;foreign_key:project_id;source_key:id"`
	Pipelines []Pipeline             `storm:"relation:has_many:Pipeline;foreign_key:project_id;source_key:id"`
}

// Stage represents the stages table
type Stage struct {
	_ struct{} `storm:"table:stages;index:idx_stages_pipeline_id,pipeline_id;index:idx_stages_stage_id,stage_id;unique:uk_stages_pipeline_stage,pipeline_id,stage_id"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	PipelineId string `db:"pipeline_id" storm:"column:pipeline_id;type:char(25);not_null;foreign_key:pipelines.id;on_delete:CASCADE"`
	PipelineVersion int `db:"pipeline_version" storm:"column:pipeline_version;type:integer;not_null;default:1"`
	StageId string `db:"stage_id" storm:"column:stage_id;type:varchar(100);not_null"`
	Name string `db:"name" storm:"column:name;type:varchar(255);not_null"`
	Type string `db:"type" storm:"column:type;type:varchar(50);not_null"`
	Action storm.JSONData `db:"action" storm:"column:action;type:jsonb;not_null;default:'{}'"`
	Target storm.JSONData `db:"target" storm:"column:target;type:jsonb;not_null;default:'{}'"`
	DependsOn storm.StringArray `db:"depends_on" storm:"column:depends_on;type:text[];not_null;default:'{}'"`
	Filter string `db:"filter" storm:"column:filter;type:text;not_null;default:''"`
	Timeout time.Duration `db:"timeout" storm:"column:timeout;type:interval;not_null;default:'30s'"`
	CacheConfig storm.JSONData `db:"cache_config" storm:"column:cache_config;type:jsonb;not_null;default:'{}'"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	UpdatedAt time.Time `db:"updated_at" storm:"column:updated_at;type:timestamptz;not_null;default:now()"`
	Pipeline *Pipeline  `storm:"relation:belongs_to:Pipeline;foreign_key:pipeline_id;target_key:id"`
}

// Subscription represents the subscriptions table
type Subscription struct {
	_ struct{} `storm:"table:subscriptions;index:idx_subscriptions_active,active,expires_at where:(active = true);index:idx_subscriptions_team_id,team_id;unique:uk_subscriptions_team_active,team_id,active"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	PlanId string `db:"plan_id" storm:"column:plan_id;type:char(25);not_null;foreign_key:plans.id;on_delete:CASCADE"`
	TeamId string `db:"team_id" storm:"column:team_id;type:char(25);not_null;foreign_key:teams.id;on_delete:CASCADE"`
	Active bool `db:"active" storm:"column:active;type:boolean;not_null;default:true"`
	ExpiresAt time.Time `db:"expires_at" storm:"column:expires_at;type:timestamptz;not_null"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	UpdatedAt time.Time `db:"updated_at" storm:"column:updated_at;type:timestamptz;not_null;default:now()"`
	Plan *Plan          `storm:"relation:belongs_to:Plan;foreign_key:plan_id;target_key:id"`
	Team *Team          `storm:"relation:belongs_to:Team;foreign_key:team_id;target_key:id"`
}

// Team represents the teams table
type Team struct {
	_ struct{} `storm:"table:teams;unique:teams_name_key,name;unique:teams_slug_key,slug"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	Name string `db:"name" storm:"column:name;type:varchar(255);not_null;unique"`
	Slug string `db:"slug" storm:"column:slug;type:varchar(255);not_null;unique"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	UpdatedAt time.Time          `db:"updated_at" storm:"column:updated_at;type:timestamptz;not_null;default:now()"`
	Projects []Project           `storm:"relation:has_many:Project;foreign_key:team_id;source_key:id"`
	Users []User                 `storm:"relation:has_many:User;foreign_key:team_id;source_key:id"`
	Subscriptions []Subscription `storm:"relation:has_many:Subscription;foreign_key:team_id;source_key:id"`
	AuditLogs []AuditLog         `storm:"relation:has_many:AuditLog;foreign_key:team_id;source_key:id"`
}

// Trigger represents the triggers table
type Trigger struct {
	_ struct{} `storm:"table:triggers;index:idx_triggers_active,is_active,type where:(is_active = true);index:idx_triggers_entity_id,entity_id;index:idx_triggers_project_id,project_id;index:idx_triggers_type,type;unique:uk_triggers_entity_id,entity_id"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	ProjectId string `db:"project_id" storm:"column:project_id;type:char(25);not_null;foreign_key:projects.id;on_delete:CASCADE"`
	PipelineIds storm.StringArray `db:"pipeline_ids" storm:"column:pipeline_ids;type:text[];not_null;default:'{}'"`
	Name string `db:"name" storm:"column:name;type:varchar(255);not_null"`
	Type string `db:"type" storm:"column:type;type:varchar(50);not_null"`
	EntityId string `db:"entity_id" storm:"column:entity_id;type:varchar(255);not_null;unique"`
	IsActive bool `db:"is_active" storm:"column:is_active;type:boolean;not_null;default:true"`
	Config storm.JSONData `db:"config" storm:"column:config;type:jsonb;not_null;default:'{}'"`
	AuthConfig storm.JSONData `db:"auth_config" storm:"column:auth_config;type:jsonb;not_null;default:'{}'"`
	LastTriggeredAt *time.Time `db:"last_triggered_at" storm:"column:last_triggered_at;type:timestamptz"`
	LastError storm.JSONData `db:"last_error" storm:"column:last_error;type:jsonb;not_null;default:'{}'"`
	TriggerCount int64 `db:"trigger_count" storm:"column:trigger_count;type:bigint;not_null;default:0"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	UpdatedAt time.Time          `db:"updated_at" storm:"column:updated_at;type:timestamptz;not_null;default:now()"`
	Project *Project`storm:"relation:belongs_to:Project;foreign_key:project_id;target_key:id"`
	DlqMessages []DlqMessage     `storm:"relation:has_many:DlqMessage;foreign_key:trigger_id;source_key:id"`
	ExecutionLogs []ExecutionLog `storm:"relation:has_many:ExecutionLog;foreign_key:trigger_id;source_key:id"`
}

// User represents the users table
type User struct {
	_ struct{} `storm:"table:users;index:idx_users_team_id,team_id;unique:users_email_key,email"`

	Id string `db:"id" storm:"column:id;type:char(25);primary_key;default:gen_cuid()"`
	TeamId string `db:"team_id" storm:"column:team_id;type:char(25);not_null;foreign_key:teams.id;on_delete:CASCADE"`
	Email string `db:"email" storm:"column:email;type:varchar(255);not_null;unique"`
	Name string `db:"name" storm:"column:name;type:varchar(255);not_null"`
	RoleId string `db:"role_id" storm:"column:role_id;type:varchar(50);not_null;default:'user'"`
	IsActive bool `db:"is_active" storm:"column:is_active;type:boolean;not_null;default:true"`
	CreatedAt time.Time `db:"created_at" storm:"column:created_at;type:timestamptz;not_null;default:now()"`
	UpdatedAt time.Time  `db:"updated_at" storm:"column:updated_at;type:timestamptz;not_null;default:now()"`
	Team *Team           `storm:"relation:belongs_to:Team;foreign_key:team_id;target_key:id"`
	AuditLogs []AuditLog `storm:"relation:has_many:AuditLog;foreign_key:user_id;source_key:id"`
	ApiKeys []ApiKey     `storm:"relation:has_many:ApiKey;foreign_key:user_id;source_key:id"`
}

