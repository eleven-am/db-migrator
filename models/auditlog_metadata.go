//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: models
// Model: AuditLog
// Generated on: 2025-07-16 21:12:15 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=models
//
// For more information, see:
//   https://github.com/eleven-am/storm

package models

import (
	"github.com/eleven-am/storm/internal/orm"
)

// AuditLogMetadata provides compile-time metadata for AuditLog
var AuditLogMetadata = &orm.ModelMetadata{
	TableName:  "audit_logs",
	StructName: "AuditLog",

	Columns: map[string]*orm.ColumnMetadata{
		"Id": {
			FieldName:       "Id",
			DBName:          "id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    true,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(AuditLog)
				return m.Id
			},
		},
		"TeamId": {
			FieldName:       "TeamId",
			DBName:          "team_id",
			GoType:          "string",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(AuditLog)
				if m.TeamId != nil {
					return *m.TeamId
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(AuditLog).TeamId == nil
			},
		},
		"UserId": {
			FieldName:       "UserId",
			DBName:          "user_id",
			GoType:          "string",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(AuditLog)
				if m.UserId != nil {
					return *m.UserId
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(AuditLog).UserId == nil
			},
		},
		"Action": {
			FieldName:       "Action",
			DBName:          "action",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(AuditLog)
				return m.Action
			},
		},
		"EntityType": {
			FieldName:       "EntityType",
			DBName:          "entity_type",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(AuditLog)
				return m.EntityType
			},
		},
		"EntityId": {
			FieldName:       "EntityId",
			DBName:          "entity_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(AuditLog)
				return m.EntityId
			},
		},
		"Success": {
			FieldName:       "Success",
			DBName:          "success",
			GoType:          "bool",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(AuditLog)
				return m.Success
			},
		},
		"ErrorMessage": {
			FieldName:       "ErrorMessage",
			DBName:          "error_message",
			GoType:          "string",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(AuditLog)
				if m.ErrorMessage != nil {
					return *m.ErrorMessage
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(AuditLog).ErrorMessage == nil
			},
		},
		"IpAddress": {
			FieldName:       "IpAddress",
			DBName:          "ip_address",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(AuditLog)
				return m.IpAddress
			},
		},
		"UserAgent": {
			FieldName:       "UserAgent",
			DBName:          "user_agent",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(AuditLog)
				return m.UserAgent
			},
		},
		"ApiKeyId": {
			FieldName:       "ApiKeyId",
			DBName:          "api_key_id",
			GoType:          "string",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(AuditLog)
				if m.ApiKeyId != nil {
					return *m.ApiKeyId
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(AuditLog).ApiKeyId == nil
			},
		},
		"CorrelationId": {
			FieldName:       "CorrelationId",
			DBName:          "correlation_id",
			GoType:          "string",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(AuditLog)
				if m.CorrelationId != nil {
					return *m.CorrelationId
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(AuditLog).CorrelationId == nil
			},
		},
		"CreatedAt": {
			FieldName:       "CreatedAt",
			DBName:          "created_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(AuditLog)
				return m.CreatedAt
			},
		},
	},

	ColumnMap: map[string]string{
		"Id":            "id",
		"TeamId":        "team_id",
		"UserId":        "user_id",
		"Action":        "action",
		"EntityType":    "entity_type",
		"EntityId":      "entity_id",
		"Success":       "success",
		"ErrorMessage":  "error_message",
		"IpAddress":     "ip_address",
		"UserAgent":     "user_agent",
		"ApiKeyId":      "api_key_id",
		"CorrelationId": "correlation_id",
		"CreatedAt":     "created_at",
	},

	ReverseMap: map[string]string{
		"id":             "Id",
		"team_id":        "TeamId",
		"user_id":        "UserId",
		"action":         "Action",
		"entity_type":    "EntityType",
		"entity_id":      "EntityId",
		"success":        "Success",
		"error_message":  "ErrorMessage",
		"ip_address":     "IpAddress",
		"user_agent":     "UserAgent",
		"api_key_id":     "ApiKeyId",
		"correlation_id": "CorrelationId",
		"created_at":     "CreatedAt",
	},

	PrimaryKeys: []string{
		"id",
	},

	Relationships: map[string]*orm.RelationshipMetadata{
		"ApiKey": {
			Name:       "ApiKey",
			Type:       "belongs_to",
			Target:     "ApiKey",
			ForeignKey: "api_key_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*AuditLog).ApiKey = value.(*ApiKey)
			},
			IsSlice: false,
		},
		"Team": {
			Name:       "Team",
			Type:       "belongs_to",
			Target:     "Team",
			ForeignKey: "team_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*AuditLog).Team = value.(*Team)
			},
			IsSlice: false,
		},
		"User": {
			Name:       "User",
			Type:       "belongs_to",
			Target:     "User",
			ForeignKey: "user_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*AuditLog).User = value.(*User)
			},
			IsSlice: false,
		},
	},
}
