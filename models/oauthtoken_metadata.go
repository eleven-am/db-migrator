//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: models
// Model: OauthToken
// Generated on: 2025-07-16 21:12:15 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=models
//
// For more information, see:
//   https://github.com/eleven-am/storm

package models

import (
	"github.com/eleven-am/storm/internal/orm"
)

// OauthTokenMetadata provides compile-time metadata for OauthToken
var OauthTokenMetadata = &orm.ModelMetadata{
	TableName:  "oauth_tokens",
	StructName: "OauthToken",

	Columns: map[string]*orm.ColumnMetadata{
		"Id": {
			FieldName:       "Id",
			DBName:          "id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    true,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				return m.Id
			},
		},
		"ProjectId": {
			FieldName:       "ProjectId",
			DBName:          "project_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				return m.ProjectId
			},
		},
		"Service": {
			FieldName:       "Service",
			DBName:          "service",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				return m.Service
			},
		},
		"Purpose": {
			FieldName:       "Purpose",
			DBName:          "purpose",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				return m.Purpose
			},
		},
		"RedirectUrl": {
			FieldName:       "RedirectUrl",
			DBName:          "redirect_url",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				return m.RedirectUrl
			},
		},
		"ClientId": {
			FieldName:       "ClientId",
			DBName:          "client_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				return m.ClientId
			},
		},
		"ClientSecret": {
			FieldName:       "ClientSecret",
			DBName:          "client_secret",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				return m.ClientSecret
			},
		},
		"AccessToken": {
			FieldName:       "AccessToken",
			DBName:          "access_token",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				return m.AccessToken
			},
		},
		"RefreshToken": {
			FieldName:       "RefreshToken",
			DBName:          "refresh_token",
			GoType:          "string",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				if m.RefreshToken != nil {
					return *m.RefreshToken
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(OauthToken).RefreshToken == nil
			},
		},
		"TokenType": {
			FieldName:       "TokenType",
			DBName:          "token_type",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				return m.TokenType
			},
		},
		"IdToken": {
			FieldName:       "IdToken",
			DBName:          "id_token",
			GoType:          "string",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				if m.IdToken != nil {
					return *m.IdToken
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(OauthToken).IdToken == nil
			},
		},
		"ExpiresAt": {
			FieldName:       "ExpiresAt",
			DBName:          "expires_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				return m.ExpiresAt
			},
		},
		"LastRefreshedAt": {
			FieldName:       "LastRefreshedAt",
			DBName:          "last_refreshed_at",
			GoType:          "time.Time",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				if m.LastRefreshedAt != nil {
					return *m.LastRefreshedAt
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(OauthToken).LastRefreshedAt == nil
			},
		},
		"Scopes": {
			FieldName:       "Scopes",
			DBName:          "scopes",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				return m.Scopes
			},
		},
		"Email": {
			FieldName:       "Email",
			DBName:          "email",
			GoType:          "string",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				if m.Email != nil {
					return *m.Email
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(OauthToken).Email == nil
			},
		},
		"Metadata": {
			FieldName:       "Metadata",
			DBName:          "metadata",
			GoType:          "",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				if m.Metadata != nil {
					return *m.Metadata
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(OauthToken).Metadata == nil
			},
		},
		"Config": {
			FieldName:       "Config",
			DBName:          "config",
			GoType:          "",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				if m.Config != nil {
					return *m.Config
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(OauthToken).Config == nil
			},
		},
		"CreatedAt": {
			FieldName:       "CreatedAt",
			DBName:          "created_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				return m.CreatedAt
			},
		},
		"UpdatedAt": {
			FieldName:       "UpdatedAt",
			DBName:          "updated_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(OauthToken)
				return m.UpdatedAt
			},
		},
	},

	ColumnMap: map[string]string{
		"Id":              "id",
		"ProjectId":       "project_id",
		"Service":         "service",
		"Purpose":         "purpose",
		"RedirectUrl":     "redirect_url",
		"ClientId":        "client_id",
		"ClientSecret":    "client_secret",
		"AccessToken":     "access_token",
		"RefreshToken":    "refresh_token",
		"TokenType":       "token_type",
		"IdToken":         "id_token",
		"ExpiresAt":       "expires_at",
		"LastRefreshedAt": "last_refreshed_at",
		"Scopes":          "scopes",
		"Email":           "email",
		"Metadata":        "metadata",
		"Config":          "config",
		"CreatedAt":       "created_at",
		"UpdatedAt":       "updated_at",
	},

	ReverseMap: map[string]string{
		"id":                "Id",
		"project_id":        "ProjectId",
		"service":           "Service",
		"purpose":           "Purpose",
		"redirect_url":      "RedirectUrl",
		"client_id":         "ClientId",
		"client_secret":     "ClientSecret",
		"access_token":      "AccessToken",
		"refresh_token":     "RefreshToken",
		"token_type":        "TokenType",
		"id_token":          "IdToken",
		"expires_at":        "ExpiresAt",
		"last_refreshed_at": "LastRefreshedAt",
		"scopes":            "Scopes",
		"email":             "Email",
		"metadata":          "Metadata",
		"config":            "Config",
		"created_at":        "CreatedAt",
		"updated_at":        "UpdatedAt",
	},

	PrimaryKeys: []string{
		"id",
	},

	Relationships: map[string]*orm.RelationshipMetadata{
		"Project": {
			Name:       "Project",
			Type:       "belongs_to",
			Target:     "Project",
			ForeignKey: "project_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*OauthToken).Project = value.(*Project)
			},
			IsSlice: false,
		},
	},
}
