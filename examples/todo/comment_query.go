// Code generated by Storm ORM generator. DO NOT EDIT.
// Generated at: 2025-07-15 12:54:23

package todo

import (
	"github.com/eleven-am/storm/internal/orm"
	"time"
)

// CommentQuery provides type-safe query building for Comment
type CommentQuery struct {
	*orm.Query[Comment]
	repo *CommentRepository
}

// Where adds a type-safe WHERE condition
func (q *CommentQuery) Where(condition orm.Condition) *CommentQuery {
	q.Query = q.Query.Where(condition)
	return q
}

// OrderBy adds ordering to the query
func (q *CommentQuery) OrderBy(expressions ...string) *CommentQuery {
	q.Query = q.Query.OrderBy(expressions...)
	return q
}

// Limit sets the LIMIT clause
func (q *CommentQuery) Limit(limit uint64) *CommentQuery {
	q.Query = q.Query.Limit(limit)
	return q
}

// Offset sets the OFFSET clause
func (q *CommentQuery) Offset(offset uint64) *CommentQuery {
	q.Query = q.Query.Offset(offset)
	return q
}

// IncludeTodo includes the Todo relationship
func (q *CommentQuery) IncludeTodo() *CommentQuery {
	q.Query = q.Query.Include("Todo")
	return q
}

// IncludeUser includes the User relationship
func (q *CommentQuery) IncludeUser() *CommentQuery {
	q.Query = q.Query.Include("User")
	return q
}

// Type-safe column-specific query methods

// WhereIDEq adds WHERE id = condition
func (q *CommentQuery) WhereIDEq(value string) *CommentQuery {
	return q.Where(Comments.ID.Eq(value))
}

// WhereIDLike adds WHERE id LIKE condition
func (q *CommentQuery) WhereIDLike(pattern string) *CommentQuery {
	return q.Where(Comments.ID.Like(pattern))
}

// WhereTodoIDEq adds WHERE todo_id = condition
func (q *CommentQuery) WhereTodoIDEq(value string) *CommentQuery {
	return q.Where(Comments.TodoID.Eq(value))
}

// WhereTodoIDLike adds WHERE todo_id LIKE condition
func (q *CommentQuery) WhereTodoIDLike(pattern string) *CommentQuery {
	return q.Where(Comments.TodoID.Like(pattern))
}

// WhereUserIDEq adds WHERE user_id = condition
func (q *CommentQuery) WhereUserIDEq(value string) *CommentQuery {
	return q.Where(Comments.UserID.Eq(value))
}

// WhereUserIDLike adds WHERE user_id LIKE condition
func (q *CommentQuery) WhereUserIDLike(pattern string) *CommentQuery {
	return q.Where(Comments.UserID.Like(pattern))
}

// WhereContentEq adds WHERE content = condition
func (q *CommentQuery) WhereContentEq(value string) *CommentQuery {
	return q.Where(Comments.Content.Eq(value))
}

// WhereContentLike adds WHERE content LIKE condition
func (q *CommentQuery) WhereContentLike(pattern string) *CommentQuery {
	return q.Where(Comments.Content.Like(pattern))
}

// WhereCreatedAtEq adds WHERE created_at = condition
func (q *CommentQuery) WhereCreatedAtEq(value time.Time) *CommentQuery {
	return q.Where(Comments.CreatedAt.Eq(value))
}

// WhereCreatedAtAfter adds WHERE created_at > condition
func (q *CommentQuery) WhereCreatedAtAfter(value time.Time) *CommentQuery {
	return q.Where(Comments.CreatedAt.Gt(value))
}

// WhereCreatedAtBefore adds WHERE created_at < condition
func (q *CommentQuery) WhereCreatedAtBefore(value time.Time) *CommentQuery {
	return q.Where(Comments.CreatedAt.Lt(value))
}

// WhereCreatedAtBetween adds WHERE created_at BETWEEN condition
func (q *CommentQuery) WhereCreatedAtBetween(start, end time.Time) *CommentQuery {
	return q.Where(Comments.CreatedAt.Between(start, end))
}

// WhereUpdatedAtEq adds WHERE updated_at = condition
func (q *CommentQuery) WhereUpdatedAtEq(value time.Time) *CommentQuery {
	return q.Where(Comments.UpdatedAt.Eq(value))
}

// WhereUpdatedAtAfter adds WHERE updated_at > condition
func (q *CommentQuery) WhereUpdatedAtAfter(value time.Time) *CommentQuery {
	return q.Where(Comments.UpdatedAt.Gt(value))
}

// WhereUpdatedAtBefore adds WHERE updated_at < condition
func (q *CommentQuery) WhereUpdatedAtBefore(value time.Time) *CommentQuery {
	return q.Where(Comments.UpdatedAt.Lt(value))
}

// WhereUpdatedAtBetween adds WHERE updated_at BETWEEN condition
func (q *CommentQuery) WhereUpdatedAtBetween(start, end time.Time) *CommentQuery {
	return q.Where(Comments.UpdatedAt.Between(start, end))
}

// Ordering methods

// OrderByIDAsc adds ORDER BY id ASC
func (q *CommentQuery) OrderByIDAsc() *CommentQuery {
	return q.OrderBy(Comments.ID.Asc())
}

// OrderByIDDesc adds ORDER BY id DESC
func (q *CommentQuery) OrderByIDDesc() *CommentQuery {
	return q.OrderBy(Comments.ID.Desc())
}

// OrderByTodoIDAsc adds ORDER BY todo_id ASC
func (q *CommentQuery) OrderByTodoIDAsc() *CommentQuery {
	return q.OrderBy(Comments.TodoID.Asc())
}

// OrderByTodoIDDesc adds ORDER BY todo_id DESC
func (q *CommentQuery) OrderByTodoIDDesc() *CommentQuery {
	return q.OrderBy(Comments.TodoID.Desc())
}

// OrderByUserIDAsc adds ORDER BY user_id ASC
func (q *CommentQuery) OrderByUserIDAsc() *CommentQuery {
	return q.OrderBy(Comments.UserID.Asc())
}

// OrderByUserIDDesc adds ORDER BY user_id DESC
func (q *CommentQuery) OrderByUserIDDesc() *CommentQuery {
	return q.OrderBy(Comments.UserID.Desc())
}

// OrderByContentAsc adds ORDER BY content ASC
func (q *CommentQuery) OrderByContentAsc() *CommentQuery {
	return q.OrderBy(Comments.Content.Asc())
}

// OrderByContentDesc adds ORDER BY content DESC
func (q *CommentQuery) OrderByContentDesc() *CommentQuery {
	return q.OrderBy(Comments.Content.Desc())
}

// OrderByCreatedAtAsc adds ORDER BY created_at ASC
func (q *CommentQuery) OrderByCreatedAtAsc() *CommentQuery {
	return q.OrderBy(Comments.CreatedAt.Asc())
}

// OrderByCreatedAtDesc adds ORDER BY created_at DESC
func (q *CommentQuery) OrderByCreatedAtDesc() *CommentQuery {
	return q.OrderBy(Comments.CreatedAt.Desc())
}

// OrderByUpdatedAtAsc adds ORDER BY updated_at ASC
func (q *CommentQuery) OrderByUpdatedAtAsc() *CommentQuery {
	return q.OrderBy(Comments.UpdatedAt.Asc())
}

// OrderByUpdatedAtDesc adds ORDER BY updated_at DESC
func (q *CommentQuery) OrderByUpdatedAtDesc() *CommentQuery {
	return q.OrderBy(Comments.UpdatedAt.Desc())
}

// Execution methods return the underlying Query methods
func (q *CommentQuery) Find() ([]Comment, error) {
	return q.Query.Find()
}

func (q *CommentQuery) First() (*Comment, error) {
	return q.Query.First()
}

func (q *CommentQuery) Count() (int64, error) {
	return q.Query.Count()
}

func (q *CommentQuery) Exists() (bool, error) {
	return q.Query.Exists()
}

func (q *CommentQuery) Delete() (int64, error) {
	return q.Query.Delete()
}
