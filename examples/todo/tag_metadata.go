//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: todo
// Model: Tag
// Generated on: 2025-07-17 01:02:48 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=todo
//
// For more information, see:
//   https://github.com/eleven-am/storm

package todo

import (
	"github.com/eleven-am/storm/pkg/storm"
)

// TagMetadata provides compile-time metadata for Tag
var TagMetadata = &storm.ModelMetadata{
	TableName:  "tags",
	StructName: "Tag",

	Columns: map[string]*storm.ColumnMetadata{
		"ID": {
			FieldName:       "ID",
			DBName:          "id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    true,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Tag)
				return m.ID
			},
		},
		"Name": {
			FieldName:       "Name",
			DBName:          "name",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Tag)
				return m.Name
			},
		},
		"Color": {
			FieldName:       "Color",
			DBName:          "color",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Tag)
				return m.Color
			},
		},
		"CreatedAt": {
			FieldName:       "CreatedAt",
			DBName:          "created_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Tag)
				return m.CreatedAt
			},
		},
	},

	ColumnMap: map[string]string{
		"ID":        "id",
		"Name":      "name",
		"Color":     "color",
		"CreatedAt": "created_at",
	},

	ReverseMap: map[string]string{
		"id":         "ID",
		"name":       "Name",
		"color":      "Color",
		"created_at": "CreatedAt",
	},

	PrimaryKeys: []string{
		"id",
	},

	Relationships: map[string]*storm.RelationshipMetadata{
		"Todos": {
			Name:      "Todos",
			Type:      "has_many_through",
			Target:    "Todo",
			SourceKey: "id",
			TargetKey: "id",
			ThroughFK: "tag_id",
			ThroughTK: "todo_id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Tag).Todos = value.([]Todo)
			},
			IsSlice: true,
		},
		"Users": {
			Name:      "Users",
			Type:      "has_many_through",
			Target:    "User",
			SourceKey: "id",
			TargetKey: "id",
			ThroughFK: "tag_id",
			ThroughTK: "user_id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Tag).Users = value.([]User)
			},
			IsSlice: true,
		},
	},
}
