// Code generated by Storm ORM generator. DO NOT EDIT.
// Generated at: 2025-07-15 12:54:23

package todo

import (
	"context"
	"fmt"
	"github.com/eleven-am/storm/internal/orm"
	"github.com/jmoiron/sqlx"
)

// CommentRepository provides type-safe operations for Comment
type CommentRepository struct {
	*orm.Repository[Comment]
}

// newCommentRepository creates a new Comment repository (internal use only - use Storm)
func newCommentRepository(db *sqlx.DB) (*CommentRepository, error) {
	baseRepo, err := orm.NewRepository[Comment](db)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository: %w", err)
	}

	return &CommentRepository{
		Repository: baseRepo,
	}, nil
}

// newCommentRepositoryWithTx creates a new Comment repository using an existing transaction (internal use only - use Storm)
func newCommentRepositoryWithTx(tx *sqlx.Tx) (*CommentRepository, error) {
	baseRepo, err := orm.NewRepositoryWithTx[Comment](tx)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository with transaction: %w", err)
	}

	return &CommentRepository{
		Repository: baseRepo,
	}, nil
}

// Query returns a type-safe query builder for Comment
func (r *CommentRepository) Query() *CommentQuery {
	return &CommentQuery{
		Query: r.Repository.Query(),
		repo:  r,
	}
}

// QueryContext returns a type-safe query builder for Comment with context
func (r *CommentRepository) QueryContext(ctx context.Context) *CommentQuery {
	return &CommentQuery{
		Query: r.Repository.QueryContext(ctx),
		repo:  r,
	}
}

// WithTodo includes the Todo relationship in queries
func (r *CommentRepository) WithTodo() *CommentQuery {
	return &CommentQuery{
		Query: r.Repository.Query().Include("Todo"),
		repo:  r,
	}
}

// WithUser includes the User relationship in queries
func (r *CommentRepository) WithUser() *CommentQuery {
	return &CommentQuery{
		Query: r.Repository.Query().Include("User"),
		repo:  r,
	}
}

// Domain-specific finder methods

// FindByIDLike finds Comment records where ID matches pattern
func (r *CommentRepository) FindByIDLike(ctx context.Context, pattern string) ([]Comment, error) {
	return r.QueryContext(ctx).Where(Comments.ID.Like(pattern)).Find()
}

// FindByTodoIDLike finds Comment records where TodoID matches pattern
func (r *CommentRepository) FindByTodoIDLike(ctx context.Context, pattern string) ([]Comment, error) {
	return r.QueryContext(ctx).Where(Comments.TodoID.Like(pattern)).Find()
}

// FindByUserIDLike finds Comment records where UserID matches pattern
func (r *CommentRepository) FindByUserIDLike(ctx context.Context, pattern string) ([]Comment, error) {
	return r.QueryContext(ctx).Where(Comments.UserID.Like(pattern)).Find()
}

// FindByContentLike finds Comment records where Content matches pattern
func (r *CommentRepository) FindByContentLike(ctx context.Context, pattern string) ([]Comment, error) {
	return r.QueryContext(ctx).Where(Comments.Content.Like(pattern)).Find()
}

// Batch operations (available methods from base repository)
// - UpsertMany: bulk upsert with ON CONFLICT resolution
// - BulkUpdate: update multiple records with different values
// Usage examples:
//   repo.UpsertMany(records, orm.UpsertOptions{ConflictColumns: []string{"id"}})
//   repo.BulkUpdate(records, orm.BulkUpdateOptions{})
