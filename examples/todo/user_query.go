// Code generated by Storm ORM generator. DO NOT EDIT.
// Generated at: 2025-07-15 12:54:23

package todo

import (
	"github.com/eleven-am/storm/internal/orm"
	"time"
)

// UserQuery provides type-safe query building for User
type UserQuery struct {
	*orm.Query[User]
	repo *UserRepository
}

// Where adds a type-safe WHERE condition
func (q *UserQuery) Where(condition orm.Condition) *UserQuery {
	q.Query = q.Query.Where(condition)
	return q
}

// OrderBy adds ordering to the query
func (q *UserQuery) OrderBy(expressions ...string) *UserQuery {
	q.Query = q.Query.OrderBy(expressions...)
	return q
}

// Limit sets the LIMIT clause
func (q *UserQuery) Limit(limit uint64) *UserQuery {
	q.Query = q.Query.Limit(limit)
	return q
}

// Offset sets the OFFSET clause
func (q *UserQuery) Offset(offset uint64) *UserQuery {
	q.Query = q.Query.Offset(offset)
	return q
}

// IncludeTodos includes the Todos relationship
func (q *UserQuery) IncludeTodos() *UserQuery {
	q.Query = q.Query.Include("Todos")
	return q
}

// IncludeCategories includes the Categories relationship
func (q *UserQuery) IncludeCategories() *UserQuery {
	q.Query = q.Query.Include("Categories")
	return q
}

// IncludeTags includes the Tags relationship
func (q *UserQuery) IncludeTags() *UserQuery {
	q.Query = q.Query.Include("Tags")
	return q
}

// Type-safe column-specific query methods

// WhereIDEq adds WHERE id = condition
func (q *UserQuery) WhereIDEq(value string) *UserQuery {
	return q.Where(Users.ID.Eq(value))
}

// WhereIDLike adds WHERE id LIKE condition
func (q *UserQuery) WhereIDLike(pattern string) *UserQuery {
	return q.Where(Users.ID.Like(pattern))
}

// WhereEmailEq adds WHERE email = condition
func (q *UserQuery) WhereEmailEq(value string) *UserQuery {
	return q.Where(Users.Email.Eq(value))
}

// WhereEmailLike adds WHERE email LIKE condition
func (q *UserQuery) WhereEmailLike(pattern string) *UserQuery {
	return q.Where(Users.Email.Like(pattern))
}

// WhereNameEq adds WHERE name = condition
func (q *UserQuery) WhereNameEq(value string) *UserQuery {
	return q.Where(Users.Name.Eq(value))
}

// WhereNameLike adds WHERE name LIKE condition
func (q *UserQuery) WhereNameLike(pattern string) *UserQuery {
	return q.Where(Users.Name.Like(pattern))
}

// WherePasswordEq adds WHERE password_hash = condition
func (q *UserQuery) WherePasswordEq(value string) *UserQuery {
	return q.Where(Users.Password.Eq(value))
}

// WherePasswordLike adds WHERE password_hash LIKE condition
func (q *UserQuery) WherePasswordLike(pattern string) *UserQuery {
	return q.Where(Users.Password.Like(pattern))
}

// WhereIsActiveEq adds WHERE is_active = condition
func (q *UserQuery) WhereIsActiveEq(value bool) *UserQuery {
	return q.Where(Users.IsActive.Eq(value))
}

// WhereIsActiveIsTrue adds WHERE is_active = true condition
func (q *UserQuery) WhereIsActiveIsTrue() *UserQuery {
	return q.Where(Users.IsActive.Eq(true))
}

// WhereIsActiveIsFalse adds WHERE is_active = false condition
func (q *UserQuery) WhereIsActiveIsFalse() *UserQuery {
	return q.Where(Users.IsActive.Eq(false))
}

// WhereCreatedAtEq adds WHERE created_at = condition
func (q *UserQuery) WhereCreatedAtEq(value time.Time) *UserQuery {
	return q.Where(Users.CreatedAt.Eq(value))
}

// WhereCreatedAtAfter adds WHERE created_at > condition
func (q *UserQuery) WhereCreatedAtAfter(value time.Time) *UserQuery {
	return q.Where(Users.CreatedAt.Gt(value))
}

// WhereCreatedAtBefore adds WHERE created_at < condition
func (q *UserQuery) WhereCreatedAtBefore(value time.Time) *UserQuery {
	return q.Where(Users.CreatedAt.Lt(value))
}

// WhereCreatedAtBetween adds WHERE created_at BETWEEN condition
func (q *UserQuery) WhereCreatedAtBetween(start, end time.Time) *UserQuery {
	return q.Where(Users.CreatedAt.Between(start, end))
}

// WhereUpdatedAtEq adds WHERE updated_at = condition
func (q *UserQuery) WhereUpdatedAtEq(value time.Time) *UserQuery {
	return q.Where(Users.UpdatedAt.Eq(value))
}

// WhereUpdatedAtAfter adds WHERE updated_at > condition
func (q *UserQuery) WhereUpdatedAtAfter(value time.Time) *UserQuery {
	return q.Where(Users.UpdatedAt.Gt(value))
}

// WhereUpdatedAtBefore adds WHERE updated_at < condition
func (q *UserQuery) WhereUpdatedAtBefore(value time.Time) *UserQuery {
	return q.Where(Users.UpdatedAt.Lt(value))
}

// WhereUpdatedAtBetween adds WHERE updated_at BETWEEN condition
func (q *UserQuery) WhereUpdatedAtBetween(start, end time.Time) *UserQuery {
	return q.Where(Users.UpdatedAt.Between(start, end))
}

// Ordering methods

// OrderByIDAsc adds ORDER BY id ASC
func (q *UserQuery) OrderByIDAsc() *UserQuery {
	return q.OrderBy(Users.ID.Asc())
}

// OrderByIDDesc adds ORDER BY id DESC
func (q *UserQuery) OrderByIDDesc() *UserQuery {
	return q.OrderBy(Users.ID.Desc())
}

// OrderByEmailAsc adds ORDER BY email ASC
func (q *UserQuery) OrderByEmailAsc() *UserQuery {
	return q.OrderBy(Users.Email.Asc())
}

// OrderByEmailDesc adds ORDER BY email DESC
func (q *UserQuery) OrderByEmailDesc() *UserQuery {
	return q.OrderBy(Users.Email.Desc())
}

// OrderByNameAsc adds ORDER BY name ASC
func (q *UserQuery) OrderByNameAsc() *UserQuery {
	return q.OrderBy(Users.Name.Asc())
}

// OrderByNameDesc adds ORDER BY name DESC
func (q *UserQuery) OrderByNameDesc() *UserQuery {
	return q.OrderBy(Users.Name.Desc())
}

// OrderByPasswordAsc adds ORDER BY password_hash ASC
func (q *UserQuery) OrderByPasswordAsc() *UserQuery {
	return q.OrderBy(Users.Password.Asc())
}

// OrderByPasswordDesc adds ORDER BY password_hash DESC
func (q *UserQuery) OrderByPasswordDesc() *UserQuery {
	return q.OrderBy(Users.Password.Desc())
}

// OrderByIsActiveAsc adds ORDER BY is_active ASC
func (q *UserQuery) OrderByIsActiveAsc() *UserQuery {
	return q.OrderBy(Users.IsActive.Asc())
}

// OrderByIsActiveDesc adds ORDER BY is_active DESC
func (q *UserQuery) OrderByIsActiveDesc() *UserQuery {
	return q.OrderBy(Users.IsActive.Desc())
}

// OrderByCreatedAtAsc adds ORDER BY created_at ASC
func (q *UserQuery) OrderByCreatedAtAsc() *UserQuery {
	return q.OrderBy(Users.CreatedAt.Asc())
}

// OrderByCreatedAtDesc adds ORDER BY created_at DESC
func (q *UserQuery) OrderByCreatedAtDesc() *UserQuery {
	return q.OrderBy(Users.CreatedAt.Desc())
}

// OrderByUpdatedAtAsc adds ORDER BY updated_at ASC
func (q *UserQuery) OrderByUpdatedAtAsc() *UserQuery {
	return q.OrderBy(Users.UpdatedAt.Asc())
}

// OrderByUpdatedAtDesc adds ORDER BY updated_at DESC
func (q *UserQuery) OrderByUpdatedAtDesc() *UserQuery {
	return q.OrderBy(Users.UpdatedAt.Desc())
}

// Execution methods return the underlying Query methods
func (q *UserQuery) Find() ([]User, error) {
	return q.Query.Find()
}

func (q *UserQuery) First() (*User, error) {
	return q.Query.First()
}

func (q *UserQuery) Count() (int64, error) {
	return q.Query.Count()
}

func (q *UserQuery) Exists() (bool, error) {
	return q.Query.Exists()
}

func (q *UserQuery) Delete() (int64, error) {
	return q.Query.Delete()
}
