// Code generated by Storm ORM generator. DO NOT EDIT.
// Generated at: 2025-07-15 12:54:23

package todo

import (
	"context"
	"fmt"
	"github.com/eleven-am/storm/internal/orm"
	"github.com/jmoiron/sqlx"
)

// CategoryRepository provides type-safe operations for Category
type CategoryRepository struct {
	*orm.Repository[Category]
}

// newCategoryRepository creates a new Category repository (internal use only - use Storm)
func newCategoryRepository(db *sqlx.DB) (*CategoryRepository, error) {
	baseRepo, err := orm.NewRepository[Category](db)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository: %w", err)
	}

	return &CategoryRepository{
		Repository: baseRepo,
	}, nil
}

// newCategoryRepositoryWithTx creates a new Category repository using an existing transaction (internal use only - use Storm)
func newCategoryRepositoryWithTx(tx *sqlx.Tx) (*CategoryRepository, error) {
	baseRepo, err := orm.NewRepositoryWithTx[Category](tx)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository with transaction: %w", err)
	}

	return &CategoryRepository{
		Repository: baseRepo,
	}, nil
}

// Query returns a type-safe query builder for Category
func (r *CategoryRepository) Query() *CategoryQuery {
	return &CategoryQuery{
		Query: r.Repository.Query(),
		repo:  r,
	}
}

// QueryContext returns a type-safe query builder for Category with context
func (r *CategoryRepository) QueryContext(ctx context.Context) *CategoryQuery {
	return &CategoryQuery{
		Query: r.Repository.QueryContext(ctx),
		repo:  r,
	}
}

// WithUser includes the User relationship in queries
func (r *CategoryRepository) WithUser() *CategoryQuery {
	return &CategoryQuery{
		Query: r.Repository.Query().Include("User"),
		repo:  r,
	}
}

// WithTodos includes the Todos relationship in queries
func (r *CategoryRepository) WithTodos() *CategoryQuery {
	return &CategoryQuery{
		Query: r.Repository.Query().Include("Todos"),
		repo:  r,
	}
}

// Domain-specific finder methods

// FindByIDLike finds Category records where ID matches pattern
func (r *CategoryRepository) FindByIDLike(ctx context.Context, pattern string) ([]Category, error) {
	return r.QueryContext(ctx).Where(Categorys.ID.Like(pattern)).Find()
}

// FindByUserIDLike finds Category records where UserID matches pattern
func (r *CategoryRepository) FindByUserIDLike(ctx context.Context, pattern string) ([]Category, error) {
	return r.QueryContext(ctx).Where(Categorys.UserID.Like(pattern)).Find()
}

// FindByNameLike finds Category records where Name matches pattern
func (r *CategoryRepository) FindByNameLike(ctx context.Context, pattern string) ([]Category, error) {
	return r.QueryContext(ctx).Where(Categorys.Name.Like(pattern)).Find()
}

// FindByColorLike finds Category records where Color matches pattern
func (r *CategoryRepository) FindByColorLike(ctx context.Context, pattern string) ([]Category, error) {
	return r.QueryContext(ctx).Where(Categorys.Color.Like(pattern)).Find()
}

// Batch operations (available methods from base repository)
// - UpsertMany: bulk upsert with ON CONFLICT resolution
// - BulkUpdate: update multiple records with different values
// Usage examples:
//   repo.UpsertMany(records, orm.UpsertOptions{ConflictColumns: []string{"id"}})
//   repo.BulkUpdate(records, orm.BulkUpdateOptions{})
