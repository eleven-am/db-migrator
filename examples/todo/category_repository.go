//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: todo
// Model: Category
// Generated on: 2025-07-17 01:02:48 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=todo
//
// For more information, see:
//   https://github.com/eleven-am/storm

package todo

import (
	"context"
	"fmt"
	"github.com/eleven-am/storm/pkg/storm"
	"github.com/jmoiron/sqlx"
)

// CategoryRepository provides type-safe operations for Category
//
// The repository inherits these operations from storm.Repository:
//
// Single Record Operations:
//   - Create(ctx, record) - Insert single record
//   - FindByID(ctx, id) - Find record by primary key
//   - Update(ctx, record) - Update single record by primary key
//   - Delete(ctx, id) - Delete record by primary key ID
//   - DeleteRecord(ctx, record) - Delete record using the record instance
//
// Batch Operations:
//   - CreateMany(ctx, records) - Insert multiple records in transaction
//   - UpdateMany(ctx, updates, condition) - Update multiple records with condition
//   - BulkUpdate(ctx, records, opts) - Bulk update using CTE with VALUES
//   - Upsert(ctx, record, opts) - Insert or update on conflict
//   - UpsertMany(ctx, records, opts) - Batch upsert operations
//
// Query Building:
//   - Query() - Create new query builder for complex queries
//   - QueryContext(ctx) - Create query builder with context support
//
// Example usage:
//
//	// Single operations
//	category, err := repo.FindByID(ctx, "123")
//	err = repo.Create(ctx, &newCategory)
//
//	// Batch operations
//	err = repo.CreateMany(ctx, multipleCategorys)
//	rowsAffected, err := repo.UpdateMany(ctx, updates, condition)
//
//	// Complex queries
//	results, err := repo.Query().Where(condition).OrderBy("created_at DESC").Find()
type CategoryRepository struct {
	*storm.Repository[Category]
}

func newCategoryRepository(db *sqlx.DB) (*CategoryRepository, error) {
	baseRepo, err := storm.NewRepository[Category](db, CategoryMetadata)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository: %w", err)
	}

	return &CategoryRepository{
		Repository: baseRepo,
	}, nil
}

func newCategoryRepositoryWithTx(tx *sqlx.Tx) (*CategoryRepository, error) {
	baseRepo, err := storm.NewRepositoryWithTx[Category](tx, CategoryMetadata)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository with transaction: %w", err)
	}

	return &CategoryRepository{
		Repository: baseRepo,
	}, nil
}

// Query returns a type-safe query builder for Category
//
// Example:
//
//	filteredCategorys, err := repo.Query().
//	    Where(Categorys.UserID.Like("%search%")).
//	    OrderBy(Categorys.ID.Desc()).
func (r *CategoryRepository) Query() *CategoryQuery {
	return &CategoryQuery{
		Query: r.Repository.Query(),
		repo:  r,
	}
}

// QueryContext returns a type-safe query builder for Category with context support.
// Use this when you need to control query timeouts, cancellation, or pass context values.
//
// Examples:
//
//	// With timeout context
//	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
//	defer cancel()
//	results, err := repo.QueryContext(ctx).Find()
//
//	// With cancellation
//	ctx, cancel := context.WithCancel(context.Background())
//	go func() { time.Sleep(time.Second); cancel() }()
//	results, err := repo.QueryContext(ctx).Find()
//
//	// Complex query with context
//	results, err := repo.QueryContext(ctx).
//	    Where(Categorys.UserID.Like("%search%")).
//	    Limit(100).Find()
func (r *CategoryRepository) QueryContext(ctx context.Context) *CategoryQuery {
	return &CategoryQuery{
		Query: r.Repository.QueryContext(ctx),
		repo:  r,
	}
}

// WithUser includes the User relationship in queries
//
// Example:
//
//	categoryWithOwner, err := repo.WithUser().Find()
//	// Each Category will have its User loaded
func (r *CategoryRepository) WithUser() *CategoryQuery {
	return &CategoryQuery{
		Query: r.Repository.Query().Include("User"),
		repo:  r,
	}
}

// WithTodos includes the Todos relationship in queries
//
// Example:
//
//	categoryWithAllTodos, err := repo.WithTodos().Find()
//	// Each Category will have its Todos slice populated
func (r *CategoryRepository) WithTodos() *CategoryQuery {
	return &CategoryQuery{
		Query: r.Repository.Query().Include("Todos"),
		repo:  r,
	}
}

// CategoryQuery provides type-safe query building for Category
//
// Query Methods (returned by Query()):
//   - Where(condition) - Add WHERE conditions
//   - OrderBy(expressions...) - Add ORDER BY
//   - Limit(limit) - Set LIMIT
//   - Offset(offset) - Set OFFSET
//   - Join(type, table, condition) - Generic join
//   - InnerJoin(table, condition) - Inner join
//   - LeftJoin(table, condition) - Left join
//   - RightJoin(table, condition) - Right join
//   - FullJoin(table, condition) - Full outer join
//   - Include(relationships...) - Load relationships
//   - IncludeWhere(relationship, conditions...) - Load relationships with conditions
//   - WithTx(tx) - Execute within transaction
//
// Execution Methods:
//   - Find() - Execute query and return all records
//   - First() - Execute query and return first record
//   - Count() - Execute count query
//   - Exists() - Check if any records exist
//   - Delete() - Execute DELETE query
//   - ExecuteRaw(query, args...) - Execute raw SQL
//
// Example usage:
//
//	// Simple query
//	results, err := repo.Query().Where(Categorys.FieldName.Eq("value")).Find()
//
//	// Complex query with joins and ordering
//	results, err := repo.Query().
//	    Where(condition).
//	    OrderBy("created_at DESC").
//	    Limit(10).
//	    Find()
//
//	// Query with relationships
//	results, err := repo.Query().
//	    Include("RelationshipName").
//	    Where(condition).
//	    Find()
type CategoryQuery struct {
	*storm.Query[Category]
	repo *CategoryRepository
}

// Where applies a filtering condition to the query.
// Use the type-safe column references from Categorys for conditions.
//
// Examples:
//
//	// Exact match
//	query.Where(Categorys.UserID.Eq("exact-value"))
//	// Pattern matching
//	query.Where(Categorys.UserID.Like("%search%"))
//	// Multiple values
//	query.Where(Categorys.UserID.In([]string{"value1", "value2"}))
//	// Time-based queries
//	query.Where(Categorys.CreatedAt.After(time.Now().AddDate(0, -1, 0)))
//	// Combine conditions
//	query.Where(Categorys.ID.Eq("value").And(Categorys.UserID.IsNotNull()))
func (q *CategoryQuery) Where(condition storm.Condition) *CategoryQuery {
	q.Query = q.Query.Where(condition)
	return q
}

// OrderBy specifies the order of results using column names or expressions.
// Use DESC suffix for descending order, ASC (or no suffix) for ascending.
//
// Examples:
//
//	// Order by time field (most recent first)
//	query.OrderBy("id DESC")
//	// Order by string field alphabetically
//	query.OrderBy("id")
//	// Multiple columns
//	query.OrderBy("id DESC", "user_id")
//	// Complex expressions
//	query.OrderBy("CASE WHEN active THEN 0 ELSE 1 END", "created_at DESC")
func (q *CategoryQuery) OrderBy(expressions ...string) *CategoryQuery {
	q.Query = q.Query.OrderBy(expressions...)
	return q
}

// Limit restricts the number of results returned.
// Useful for pagination and preventing large result sets.
//
// Examples:
//
//	// Get first 10 results
//	query.Limit(10)
//	// Get top 100 most recent categorys
//	query.OrderBy("created_at DESC").Limit(100)
func (q *CategoryQuery) Limit(limit uint64) *CategoryQuery {
	q.Query = q.Query.Limit(limit)
	return q
}

// Offset skips the specified number of results.
// Typically used with Limit for pagination.
//
// Examples:
//
//	// Skip first 20 results (page 3 with 10 per page)
//	query.Offset(20).Limit(10)
//	// Get results 51-100
//	query.Offset(50).Limit(50)
func (q *CategoryQuery) Offset(offset uint64) *CategoryQuery {
	q.Query = q.Query.Offset(offset)
	return q
}

// Find executes the query and returns all matching Category records.
// Returns an empty slice if no records are found.
//
// Examples:
//
//	// Get all categorys
//	allCategorys, err := repo.Query().Find()
//	// Search categorys by userid
//	matchingCategorys, err := repo.Query().Where(Categorys.UserID.Like("%search%")).Find()
func (q *CategoryQuery) Find() ([]Category, error) {
	return q.Query.Find()
}

// First executes the query and returns the first matching Category record.
// Returns nil if no record is found. Use with OrderBy to get specific record.
//
// Examples:
//
//	// Get first category
//	firstCategory, err := repo.Query().First()
//	// Get most recent category
//	latestCategory, err := repo.Query().OrderBy("CreatedAt DESC").First()
//	// Get specific category by userid
//	specificCategory, err := repo.Query().Where(Categorys.UserID.Eq("value")).First()
func (q *CategoryQuery) First() (*Category, error) {
	return q.Query.First()
}

// Count returns the number of Category records matching the query conditions.
// Does not load the actual records, making it efficient for large datasets.
//
// Examples:
//
//	// Count all categorys
//	total, err := repo.Query().Count()
//	// Count categorys matching criteria
//	matchingCount, err := repo.Query().Where(Categorys.UserID.Like("%search%")).Count()
func (q *CategoryQuery) Count() (int64, error) {
	return q.Query.Count()
}

// Exists checks if any Category records match the query conditions.
// Returns true if at least one record exists, false otherwise.
// More efficient than Count() when you only need to know if records exist.
//
// Examples:
//
//	// Check if any categorys exist
//	hasAny, err := repo.Query().Exists()
//	// Check if category with specific userid exists
//	exists, err := repo.Query().Where(Categorys.UserID.Eq("value")).Exists()
func (q *CategoryQuery) Exists() (bool, error) {
	return q.Query.Exists()
}

// Delete removes all Category records matching the query conditions.
// Returns the number of records deleted.
// WARNING: This is a bulk operation that cannot be undone.
//
// Examples:
//
//	// Delete all categorys (use with caution!)
//	deleted, err := repo.Query().Delete()
//	// Delete categorys matching criteria
//	deleted, err := repo.Query().Where(Categorys.UserID.Like("temp_%")).Delete()
func (q *CategoryQuery) Delete() (int64, error) {
	return q.Query.Delete()
}
