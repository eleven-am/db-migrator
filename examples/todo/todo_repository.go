// Code generated by Storm ORM generator. DO NOT EDIT.
// Generated at: 2025-07-15 12:54:23

package todo

import (
	"context"
	"fmt"
	"github.com/eleven-am/storm/internal/orm"
	"github.com/jmoiron/sqlx"
)

// TodoRepository provides type-safe operations for Todo
type TodoRepository struct {
	*orm.Repository[Todo]
}

// newTodoRepository creates a new Todo repository (internal use only - use Storm)
func newTodoRepository(db *sqlx.DB) (*TodoRepository, error) {
	baseRepo, err := orm.NewRepository[Todo](db)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository: %w", err)
	}

	return &TodoRepository{
		Repository: baseRepo,
	}, nil
}

// newTodoRepositoryWithTx creates a new Todo repository using an existing transaction (internal use only - use Storm)
func newTodoRepositoryWithTx(tx *sqlx.Tx) (*TodoRepository, error) {
	baseRepo, err := orm.NewRepositoryWithTx[Todo](tx)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository with transaction: %w", err)
	}

	return &TodoRepository{
		Repository: baseRepo,
	}, nil
}

// Query returns a type-safe query builder for Todo
func (r *TodoRepository) Query() *TodoQuery {
	return &TodoQuery{
		Query: r.Repository.Query(),
		repo:  r,
	}
}

// QueryContext returns a type-safe query builder for Todo with context
func (r *TodoRepository) QueryContext(ctx context.Context) *TodoQuery {
	return &TodoQuery{
		Query: r.Repository.QueryContext(ctx),
		repo:  r,
	}
}

// WithUser includes the User relationship in queries
func (r *TodoRepository) WithUser() *TodoQuery {
	return &TodoQuery{
		Query: r.Repository.Query().Include("User"),
		repo:  r,
	}
}

// WithCategory includes the Category relationship in queries
func (r *TodoRepository) WithCategory() *TodoQuery {
	return &TodoQuery{
		Query: r.Repository.Query().Include("Category"),
		repo:  r,
	}
}

// WithTags includes the Tags relationship in queries
func (r *TodoRepository) WithTags() *TodoQuery {
	return &TodoQuery{
		Query: r.Repository.Query().Include("Tags"),
		repo:  r,
	}
}

// WithComments includes the Comments relationship in queries
func (r *TodoRepository) WithComments() *TodoQuery {
	return &TodoQuery{
		Query: r.Repository.Query().Include("Comments"),
		repo:  r,
	}
}

// Domain-specific finder methods

// FindByIDLike finds Todo records where ID matches pattern
func (r *TodoRepository) FindByIDLike(ctx context.Context, pattern string) ([]Todo, error) {
	return r.QueryContext(ctx).Where(Todos.ID.Like(pattern)).Find()
}

// FindByUserIDLike finds Todo records where UserID matches pattern
func (r *TodoRepository) FindByUserIDLike(ctx context.Context, pattern string) ([]Todo, error) {
	return r.QueryContext(ctx).Where(Todos.UserID.Like(pattern)).Find()
}

// FindByTitleLike finds Todo records where Title matches pattern
func (r *TodoRepository) FindByTitleLike(ctx context.Context, pattern string) ([]Todo, error) {
	return r.QueryContext(ctx).Where(Todos.Title.Like(pattern)).Find()
}

// Batch operations (available methods from base repository)
// - UpsertMany: bulk upsert with ON CONFLICT resolution
// - BulkUpdate: update multiple records with different values
// Usage examples:
//   repo.UpsertMany(records, orm.UpsertOptions{ConflictColumns: []string{"id"}})
//   repo.BulkUpdate(records, orm.BulkUpdateOptions{})
