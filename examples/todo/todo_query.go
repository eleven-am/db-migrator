// Code generated by Storm ORM generator. DO NOT EDIT.
// Generated at: 2025-07-15 12:54:23

package todo

import (
	"github.com/eleven-am/storm/internal/orm"
	"time"
)

// TodoQuery provides type-safe query building for Todo
type TodoQuery struct {
	*orm.Query[Todo]
	repo *TodoRepository
}

// Where adds a type-safe WHERE condition
func (q *TodoQuery) Where(condition orm.Condition) *TodoQuery {
	q.Query = q.Query.Where(condition)
	return q
}

// OrderBy adds ordering to the query
func (q *TodoQuery) OrderBy(expressions ...string) *TodoQuery {
	q.Query = q.Query.OrderBy(expressions...)
	return q
}

// Limit sets the LIMIT clause
func (q *TodoQuery) Limit(limit uint64) *TodoQuery {
	q.Query = q.Query.Limit(limit)
	return q
}

// Offset sets the OFFSET clause
func (q *TodoQuery) Offset(offset uint64) *TodoQuery {
	q.Query = q.Query.Offset(offset)
	return q
}

// IncludeUser includes the User relationship
func (q *TodoQuery) IncludeUser() *TodoQuery {
	q.Query = q.Query.Include("User")
	return q
}

// IncludeCategory includes the Category relationship
func (q *TodoQuery) IncludeCategory() *TodoQuery {
	q.Query = q.Query.Include("Category")
	return q
}

// IncludeTags includes the Tags relationship
func (q *TodoQuery) IncludeTags() *TodoQuery {
	q.Query = q.Query.Include("Tags")
	return q
}

// IncludeComments includes the Comments relationship
func (q *TodoQuery) IncludeComments() *TodoQuery {
	q.Query = q.Query.Include("Comments")
	return q
}

// Type-safe column-specific query methods

// WhereIDEq adds WHERE id = condition
func (q *TodoQuery) WhereIDEq(value string) *TodoQuery {
	return q.Where(Todos.ID.Eq(value))
}

// WhereIDLike adds WHERE id LIKE condition
func (q *TodoQuery) WhereIDLike(pattern string) *TodoQuery {
	return q.Where(Todos.ID.Like(pattern))
}

// WhereUserIDEq adds WHERE user_id = condition
func (q *TodoQuery) WhereUserIDEq(value string) *TodoQuery {
	return q.Where(Todos.UserID.Eq(value))
}

// WhereUserIDLike adds WHERE user_id LIKE condition
func (q *TodoQuery) WhereUserIDLike(pattern string) *TodoQuery {
	return q.Where(Todos.UserID.Like(pattern))
}

// WhereCategoryIDEq adds WHERE category_id = condition
func (q *TodoQuery) WhereCategoryIDEq(value string) *TodoQuery {
	return q.Where(Todos.CategoryID.Eq(value))
}

// WhereCategoryIDLike adds WHERE category_id LIKE condition
func (q *TodoQuery) WhereCategoryIDLike(pattern string) *TodoQuery {
	return q.Where(Todos.CategoryID.Like(pattern))
}

// WhereCategoryIDIsNull adds WHERE category_id IS NULL condition
func (q *TodoQuery) WhereCategoryIDIsNull() *TodoQuery {
	return q.Where(Todos.CategoryID.IsNull())
}

// WhereCategoryIDIsNotNull adds WHERE category_id IS NOT NULL condition
func (q *TodoQuery) WhereCategoryIDIsNotNull() *TodoQuery {
	return q.Where(Todos.CategoryID.IsNotNull())
}

// WhereTitleEq adds WHERE title = condition
func (q *TodoQuery) WhereTitleEq(value string) *TodoQuery {
	return q.Where(Todos.Title.Eq(value))
}

// WhereTitleLike adds WHERE title LIKE condition
func (q *TodoQuery) WhereTitleLike(pattern string) *TodoQuery {
	return q.Where(Todos.Title.Like(pattern))
}

// WhereDescriptionEq adds WHERE description = condition
func (q *TodoQuery) WhereDescriptionEq(value string) *TodoQuery {
	return q.Where(Todos.Description.Eq(value))
}

// WhereDescriptionLike adds WHERE description LIKE condition
func (q *TodoQuery) WhereDescriptionLike(pattern string) *TodoQuery {
	return q.Where(Todos.Description.Like(pattern))
}

// WhereDescriptionIsNull adds WHERE description IS NULL condition
func (q *TodoQuery) WhereDescriptionIsNull() *TodoQuery {
	return q.Where(Todos.Description.IsNull())
}

// WhereDescriptionIsNotNull adds WHERE description IS NOT NULL condition
func (q *TodoQuery) WhereDescriptionIsNotNull() *TodoQuery {
	return q.Where(Todos.Description.IsNotNull())
}

// WhereDueDateEq adds WHERE due_date = condition
func (q *TodoQuery) WhereDueDateEq(value time.Time) *TodoQuery {
	return q.Where(Todos.DueDate.Eq(value))
}

// WhereDueDateAfter adds WHERE due_date > condition
func (q *TodoQuery) WhereDueDateAfter(value time.Time) *TodoQuery {
	return q.Where(Todos.DueDate.Gt(value))
}

// WhereDueDateBefore adds WHERE due_date < condition
func (q *TodoQuery) WhereDueDateBefore(value time.Time) *TodoQuery {
	return q.Where(Todos.DueDate.Lt(value))
}

// WhereDueDateBetween adds WHERE due_date BETWEEN condition
func (q *TodoQuery) WhereDueDateBetween(start, end time.Time) *TodoQuery {
	return q.Where(Todos.DueDate.Between(start, end))
}

// WhereDueDateIsNull adds WHERE due_date IS NULL condition
func (q *TodoQuery) WhereDueDateIsNull() *TodoQuery {
	return q.Where(Todos.DueDate.IsNull())
}

// WhereDueDateIsNotNull adds WHERE due_date IS NOT NULL condition
func (q *TodoQuery) WhereDueDateIsNotNull() *TodoQuery {
	return q.Where(Todos.DueDate.IsNotNull())
}

// WhereCompletedAtEq adds WHERE completed_at = condition
func (q *TodoQuery) WhereCompletedAtEq(value time.Time) *TodoQuery {
	return q.Where(Todos.CompletedAt.Eq(value))
}

// WhereCompletedAtAfter adds WHERE completed_at > condition
func (q *TodoQuery) WhereCompletedAtAfter(value time.Time) *TodoQuery {
	return q.Where(Todos.CompletedAt.Gt(value))
}

// WhereCompletedAtBefore adds WHERE completed_at < condition
func (q *TodoQuery) WhereCompletedAtBefore(value time.Time) *TodoQuery {
	return q.Where(Todos.CompletedAt.Lt(value))
}

// WhereCompletedAtBetween adds WHERE completed_at BETWEEN condition
func (q *TodoQuery) WhereCompletedAtBetween(start, end time.Time) *TodoQuery {
	return q.Where(Todos.CompletedAt.Between(start, end))
}

// WhereCompletedAtIsNull adds WHERE completed_at IS NULL condition
func (q *TodoQuery) WhereCompletedAtIsNull() *TodoQuery {
	return q.Where(Todos.CompletedAt.IsNull())
}

// WhereCompletedAtIsNotNull adds WHERE completed_at IS NOT NULL condition
func (q *TodoQuery) WhereCompletedAtIsNotNull() *TodoQuery {
	return q.Where(Todos.CompletedAt.IsNotNull())
}

// WhereCreatedAtEq adds WHERE created_at = condition
func (q *TodoQuery) WhereCreatedAtEq(value time.Time) *TodoQuery {
	return q.Where(Todos.CreatedAt.Eq(value))
}

// WhereCreatedAtAfter adds WHERE created_at > condition
func (q *TodoQuery) WhereCreatedAtAfter(value time.Time) *TodoQuery {
	return q.Where(Todos.CreatedAt.Gt(value))
}

// WhereCreatedAtBefore adds WHERE created_at < condition
func (q *TodoQuery) WhereCreatedAtBefore(value time.Time) *TodoQuery {
	return q.Where(Todos.CreatedAt.Lt(value))
}

// WhereCreatedAtBetween adds WHERE created_at BETWEEN condition
func (q *TodoQuery) WhereCreatedAtBetween(start, end time.Time) *TodoQuery {
	return q.Where(Todos.CreatedAt.Between(start, end))
}

// WhereUpdatedAtEq adds WHERE updated_at = condition
func (q *TodoQuery) WhereUpdatedAtEq(value time.Time) *TodoQuery {
	return q.Where(Todos.UpdatedAt.Eq(value))
}

// WhereUpdatedAtAfter adds WHERE updated_at > condition
func (q *TodoQuery) WhereUpdatedAtAfter(value time.Time) *TodoQuery {
	return q.Where(Todos.UpdatedAt.Gt(value))
}

// WhereUpdatedAtBefore adds WHERE updated_at < condition
func (q *TodoQuery) WhereUpdatedAtBefore(value time.Time) *TodoQuery {
	return q.Where(Todos.UpdatedAt.Lt(value))
}

// WhereUpdatedAtBetween adds WHERE updated_at BETWEEN condition
func (q *TodoQuery) WhereUpdatedAtBetween(start, end time.Time) *TodoQuery {
	return q.Where(Todos.UpdatedAt.Between(start, end))
}

// Ordering methods

// OrderByIDAsc adds ORDER BY id ASC
func (q *TodoQuery) OrderByIDAsc() *TodoQuery {
	return q.OrderBy(Todos.ID.Asc())
}

// OrderByIDDesc adds ORDER BY id DESC
func (q *TodoQuery) OrderByIDDesc() *TodoQuery {
	return q.OrderBy(Todos.ID.Desc())
}

// OrderByUserIDAsc adds ORDER BY user_id ASC
func (q *TodoQuery) OrderByUserIDAsc() *TodoQuery {
	return q.OrderBy(Todos.UserID.Asc())
}

// OrderByUserIDDesc adds ORDER BY user_id DESC
func (q *TodoQuery) OrderByUserIDDesc() *TodoQuery {
	return q.OrderBy(Todos.UserID.Desc())
}

// OrderByCategoryIDAsc adds ORDER BY category_id ASC
func (q *TodoQuery) OrderByCategoryIDAsc() *TodoQuery {
	return q.OrderBy(Todos.CategoryID.Asc())
}

// OrderByCategoryIDDesc adds ORDER BY category_id DESC
func (q *TodoQuery) OrderByCategoryIDDesc() *TodoQuery {
	return q.OrderBy(Todos.CategoryID.Desc())
}

// OrderByTitleAsc adds ORDER BY title ASC
func (q *TodoQuery) OrderByTitleAsc() *TodoQuery {
	return q.OrderBy(Todos.Title.Asc())
}

// OrderByTitleDesc adds ORDER BY title DESC
func (q *TodoQuery) OrderByTitleDesc() *TodoQuery {
	return q.OrderBy(Todos.Title.Desc())
}

// OrderByDescriptionAsc adds ORDER BY description ASC
func (q *TodoQuery) OrderByDescriptionAsc() *TodoQuery {
	return q.OrderBy(Todos.Description.Asc())
}

// OrderByDescriptionDesc adds ORDER BY description DESC
func (q *TodoQuery) OrderByDescriptionDesc() *TodoQuery {
	return q.OrderBy(Todos.Description.Desc())
}

// OrderByStatusAsc adds ORDER BY status ASC
func (q *TodoQuery) OrderByStatusAsc() *TodoQuery {
	return q.OrderBy(Todos.Status.Asc())
}

// OrderByStatusDesc adds ORDER BY status DESC
func (q *TodoQuery) OrderByStatusDesc() *TodoQuery {
	return q.OrderBy(Todos.Status.Desc())
}

// OrderByPriorityAsc adds ORDER BY priority ASC
func (q *TodoQuery) OrderByPriorityAsc() *TodoQuery {
	return q.OrderBy(Todos.Priority.Asc())
}

// OrderByPriorityDesc adds ORDER BY priority DESC
func (q *TodoQuery) OrderByPriorityDesc() *TodoQuery {
	return q.OrderBy(Todos.Priority.Desc())
}

// OrderByDueDateAsc adds ORDER BY due_date ASC
func (q *TodoQuery) OrderByDueDateAsc() *TodoQuery {
	return q.OrderBy(Todos.DueDate.Asc())
}

// OrderByDueDateDesc adds ORDER BY due_date DESC
func (q *TodoQuery) OrderByDueDateDesc() *TodoQuery {
	return q.OrderBy(Todos.DueDate.Desc())
}

// OrderByCompletedAtAsc adds ORDER BY completed_at ASC
func (q *TodoQuery) OrderByCompletedAtAsc() *TodoQuery {
	return q.OrderBy(Todos.CompletedAt.Asc())
}

// OrderByCompletedAtDesc adds ORDER BY completed_at DESC
func (q *TodoQuery) OrderByCompletedAtDesc() *TodoQuery {
	return q.OrderBy(Todos.CompletedAt.Desc())
}

// OrderByCreatedAtAsc adds ORDER BY created_at ASC
func (q *TodoQuery) OrderByCreatedAtAsc() *TodoQuery {
	return q.OrderBy(Todos.CreatedAt.Asc())
}

// OrderByCreatedAtDesc adds ORDER BY created_at DESC
func (q *TodoQuery) OrderByCreatedAtDesc() *TodoQuery {
	return q.OrderBy(Todos.CreatedAt.Desc())
}

// OrderByUpdatedAtAsc adds ORDER BY updated_at ASC
func (q *TodoQuery) OrderByUpdatedAtAsc() *TodoQuery {
	return q.OrderBy(Todos.UpdatedAt.Asc())
}

// OrderByUpdatedAtDesc adds ORDER BY updated_at DESC
func (q *TodoQuery) OrderByUpdatedAtDesc() *TodoQuery {
	return q.OrderBy(Todos.UpdatedAt.Desc())
}

// Execution methods return the underlying Query methods
func (q *TodoQuery) Find() ([]Todo, error) {
	return q.Query.Find()
}

func (q *TodoQuery) First() (*Todo, error) {
	return q.Query.First()
}

func (q *TodoQuery) Count() (int64, error) {
	return q.Query.Count()
}

func (q *TodoQuery) Exists() (bool, error) {
	return q.Query.Exists()
}

func (q *TodoQuery) Delete() (int64, error) {
	return q.Query.Delete()
}
