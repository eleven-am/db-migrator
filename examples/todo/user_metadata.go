//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: todo
// Model: User
// Generated on: 2025-07-17 00:36:07 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=todo
//
// For more information, see:
//   https://github.com/eleven-am/storm

package todo

import (
	"github.com/eleven-am/storm/internal/orm"
)

// UserMetadata provides compile-time metadata for User
var UserMetadata = &orm.ModelMetadata{
	TableName:  "users",
	StructName: "User",

	Columns: map[string]*orm.ColumnMetadata{
		"ID": {
			FieldName:       "ID",
			DBName:          "id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    true,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(User)
				return m.ID
			},
		},
		"Email": {
			FieldName:       "Email",
			DBName:          "email",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(User)
				return m.Email
			},
		},
		"Name": {
			FieldName:       "Name",
			DBName:          "name",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(User)
				return m.Name
			},
		},
		"Password": {
			FieldName:       "Password",
			DBName:          "password_hash",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(User)
				return m.Password
			},
		},
		"IsActive": {
			FieldName:       "IsActive",
			DBName:          "is_active",
			GoType:          "bool",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(User)
				return m.IsActive
			},
		},
		"CreatedAt": {
			FieldName:       "CreatedAt",
			DBName:          "created_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(User)
				return m.CreatedAt
			},
		},
		"UpdatedAt": {
			FieldName:       "UpdatedAt",
			DBName:          "updated_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(User)
				return m.UpdatedAt
			},
		},
	},

	ColumnMap: map[string]string{
		"ID":        "id",
		"Email":     "email",
		"Name":      "name",
		"Password":  "password_hash",
		"IsActive":  "is_active",
		"CreatedAt": "created_at",
		"UpdatedAt": "updated_at",
	},

	ReverseMap: map[string]string{
		"id":            "ID",
		"email":         "Email",
		"name":          "Name",
		"password_hash": "Password",
		"is_active":     "IsActive",
		"created_at":    "CreatedAt",
		"updated_at":    "UpdatedAt",
	},

	PrimaryKeys: []string{
		"id",
	},

	Relationships: map[string]*orm.RelationshipMetadata{
		"Todos": {
			Name:       "Todos",
			Type:       "has_many",
			Target:     "Todo",
			ForeignKey: "user_id",
			SourceKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*User).Todos = value.([]Todo)
			},
			IsSlice: true,
		},
		"Categories": {
			Name:       "Categories",
			Type:       "has_many",
			Target:     "Category",
			ForeignKey: "user_id",
			SourceKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*User).Categories = value.([]Category)
			},
			IsSlice: true,
		},
		"Tags": {
			Name:      "Tags",
			Type:      "has_many_through",
			Target:    "Tag",
			SourceKey: "id",
			TargetKey: "id",
			ThroughFK: "user_id",
			ThroughTK: "tag_id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*User).Tags = value.([]Tag)
			},
			IsSlice: true,
		},
	},
}
