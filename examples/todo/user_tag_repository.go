// Code generated by Storm ORM generator. DO NOT EDIT.
// Generated at: 2025-07-15 12:54:23

package todo

import (
	"context"
	"fmt"
	"github.com/eleven-am/storm/internal/orm"
	"github.com/jmoiron/sqlx"
)

// UserTagRepository provides type-safe operations for UserTag
type UserTagRepository struct {
	*orm.Repository[UserTag]
}

// newUserTagRepository creates a new UserTag repository (internal use only - use Storm)
func newUserTagRepository(db *sqlx.DB) (*UserTagRepository, error) {
	baseRepo, err := orm.NewRepository[UserTag](db)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository: %w", err)
	}

	return &UserTagRepository{
		Repository: baseRepo,
	}, nil
}

// newUserTagRepositoryWithTx creates a new UserTag repository using an existing transaction (internal use only - use Storm)
func newUserTagRepositoryWithTx(tx *sqlx.Tx) (*UserTagRepository, error) {
	baseRepo, err := orm.NewRepositoryWithTx[UserTag](tx)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository with transaction: %w", err)
	}

	return &UserTagRepository{
		Repository: baseRepo,
	}, nil
}

// Query returns a type-safe query builder for UserTag
func (r *UserTagRepository) Query() *UserTagQuery {
	return &UserTagQuery{
		Query: r.Repository.Query(),
		repo:  r,
	}
}

// QueryContext returns a type-safe query builder for UserTag with context
func (r *UserTagRepository) QueryContext(ctx context.Context) *UserTagQuery {
	return &UserTagQuery{
		Query: r.Repository.QueryContext(ctx),
		repo:  r,
	}
}

// Domain-specific finder methods

// FindByUserIDLike finds UserTag records where UserID matches pattern
func (r *UserTagRepository) FindByUserIDLike(ctx context.Context, pattern string) ([]UserTag, error) {
	return r.QueryContext(ctx).Where(UserTags.UserID.Like(pattern)).Find()
}

// FindByTagIDLike finds UserTag records where TagID matches pattern
func (r *UserTagRepository) FindByTagIDLike(ctx context.Context, pattern string) ([]UserTag, error) {
	return r.QueryContext(ctx).Where(UserTags.TagID.Like(pattern)).Find()
}

// Batch operations (available methods from base repository)
// - UpsertMany: bulk upsert with ON CONFLICT resolution
// - BulkUpdate: update multiple records with different values
// Usage examples:
//   repo.UpsertMany(records, orm.UpsertOptions{ConflictColumns: []string{"id"}})
//   repo.BulkUpdate(records, orm.BulkUpdateOptions{})
