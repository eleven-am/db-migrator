//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: todo
// Model: Comment
// Generated on: 2025-07-17 01:02:48 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=todo
//
// For more information, see:
//   https://github.com/eleven-am/storm

package todo

import (
	"github.com/eleven-am/storm/internal/orm"
)

// CommentMetadata provides compile-time metadata for Comment
var CommentMetadata = &orm.ModelMetadata{
	TableName:  "comments",
	StructName: "Comment",

	Columns: map[string]*orm.ColumnMetadata{
		"ID": {
			FieldName:       "ID",
			DBName:          "id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    true,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Comment)
				return m.ID
			},
		},
		"TodoID": {
			FieldName:       "TodoID",
			DBName:          "todo_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Comment)
				return m.TodoID
			},
		},
		"UserID": {
			FieldName:       "UserID",
			DBName:          "user_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Comment)
				return m.UserID
			},
		},
		"Content": {
			FieldName:       "Content",
			DBName:          "content",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Comment)
				return m.Content
			},
		},
		"CreatedAt": {
			FieldName:       "CreatedAt",
			DBName:          "created_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Comment)
				return m.CreatedAt
			},
		},
		"UpdatedAt": {
			FieldName:       "UpdatedAt",
			DBName:          "updated_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Comment)
				return m.UpdatedAt
			},
		},
	},

	ColumnMap: map[string]string{
		"ID":        "id",
		"TodoID":    "todo_id",
		"UserID":    "user_id",
		"Content":   "content",
		"CreatedAt": "created_at",
		"UpdatedAt": "updated_at",
	},

	ReverseMap: map[string]string{
		"id":         "ID",
		"todo_id":    "TodoID",
		"user_id":    "UserID",
		"content":    "Content",
		"created_at": "CreatedAt",
		"updated_at": "UpdatedAt",
	},

	PrimaryKeys: []string{
		"id",
	},

	Relationships: map[string]*orm.RelationshipMetadata{
		"Todo": {
			Name:       "Todo",
			Type:       "belongs_to",
			Target:     "Todo",
			ForeignKey: "todo_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Comment).Todo = value.(*Todo)
			},
			IsSlice: false,
		},
		"User": {
			Name:       "User",
			Type:       "belongs_to",
			Target:     "User",
			ForeignKey: "user_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Comment).User = value.(*User)
			},
			IsSlice: false,
		},
	},
}
