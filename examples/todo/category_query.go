// Code generated by Storm ORM generator. DO NOT EDIT.
// Generated at: 2025-07-15 12:54:23

package todo

import (
	"github.com/eleven-am/storm/internal/orm"
	"time"
)

// CategoryQuery provides type-safe query building for Category
type CategoryQuery struct {
	*orm.Query[Category]
	repo *CategoryRepository
}

// Where adds a type-safe WHERE condition
func (q *CategoryQuery) Where(condition orm.Condition) *CategoryQuery {
	q.Query = q.Query.Where(condition)
	return q
}

// OrderBy adds ordering to the query
func (q *CategoryQuery) OrderBy(expressions ...string) *CategoryQuery {
	q.Query = q.Query.OrderBy(expressions...)
	return q
}

// Limit sets the LIMIT clause
func (q *CategoryQuery) Limit(limit uint64) *CategoryQuery {
	q.Query = q.Query.Limit(limit)
	return q
}

// Offset sets the OFFSET clause
func (q *CategoryQuery) Offset(offset uint64) *CategoryQuery {
	q.Query = q.Query.Offset(offset)
	return q
}

// IncludeUser includes the User relationship
func (q *CategoryQuery) IncludeUser() *CategoryQuery {
	q.Query = q.Query.Include("User")
	return q
}

// IncludeTodos includes the Todos relationship
func (q *CategoryQuery) IncludeTodos() *CategoryQuery {
	q.Query = q.Query.Include("Todos")
	return q
}

// Type-safe column-specific query methods

// WhereIDEq adds WHERE id = condition
func (q *CategoryQuery) WhereIDEq(value string) *CategoryQuery {
	return q.Where(Categorys.ID.Eq(value))
}

// WhereIDLike adds WHERE id LIKE condition
func (q *CategoryQuery) WhereIDLike(pattern string) *CategoryQuery {
	return q.Where(Categorys.ID.Like(pattern))
}

// WhereUserIDEq adds WHERE user_id = condition
func (q *CategoryQuery) WhereUserIDEq(value string) *CategoryQuery {
	return q.Where(Categorys.UserID.Eq(value))
}

// WhereUserIDLike adds WHERE user_id LIKE condition
func (q *CategoryQuery) WhereUserIDLike(pattern string) *CategoryQuery {
	return q.Where(Categorys.UserID.Like(pattern))
}

// WhereNameEq adds WHERE name = condition
func (q *CategoryQuery) WhereNameEq(value string) *CategoryQuery {
	return q.Where(Categorys.Name.Eq(value))
}

// WhereNameLike adds WHERE name LIKE condition
func (q *CategoryQuery) WhereNameLike(pattern string) *CategoryQuery {
	return q.Where(Categorys.Name.Like(pattern))
}

// WhereColorEq adds WHERE color = condition
func (q *CategoryQuery) WhereColorEq(value string) *CategoryQuery {
	return q.Where(Categorys.Color.Eq(value))
}

// WhereColorLike adds WHERE color LIKE condition
func (q *CategoryQuery) WhereColorLike(pattern string) *CategoryQuery {
	return q.Where(Categorys.Color.Like(pattern))
}

// WhereDescriptionEq adds WHERE description = condition
func (q *CategoryQuery) WhereDescriptionEq(value string) *CategoryQuery {
	return q.Where(Categorys.Description.Eq(value))
}

// WhereDescriptionLike adds WHERE description LIKE condition
func (q *CategoryQuery) WhereDescriptionLike(pattern string) *CategoryQuery {
	return q.Where(Categorys.Description.Like(pattern))
}

// WhereDescriptionIsNull adds WHERE description IS NULL condition
func (q *CategoryQuery) WhereDescriptionIsNull() *CategoryQuery {
	return q.Where(Categorys.Description.IsNull())
}

// WhereDescriptionIsNotNull adds WHERE description IS NOT NULL condition
func (q *CategoryQuery) WhereDescriptionIsNotNull() *CategoryQuery {
	return q.Where(Categorys.Description.IsNotNull())
}

// WhereCreatedAtEq adds WHERE created_at = condition
func (q *CategoryQuery) WhereCreatedAtEq(value time.Time) *CategoryQuery {
	return q.Where(Categorys.CreatedAt.Eq(value))
}

// WhereCreatedAtAfter adds WHERE created_at > condition
func (q *CategoryQuery) WhereCreatedAtAfter(value time.Time) *CategoryQuery {
	return q.Where(Categorys.CreatedAt.Gt(value))
}

// WhereCreatedAtBefore adds WHERE created_at < condition
func (q *CategoryQuery) WhereCreatedAtBefore(value time.Time) *CategoryQuery {
	return q.Where(Categorys.CreatedAt.Lt(value))
}

// WhereCreatedAtBetween adds WHERE created_at BETWEEN condition
func (q *CategoryQuery) WhereCreatedAtBetween(start, end time.Time) *CategoryQuery {
	return q.Where(Categorys.CreatedAt.Between(start, end))
}

// WhereUpdatedAtEq adds WHERE updated_at = condition
func (q *CategoryQuery) WhereUpdatedAtEq(value time.Time) *CategoryQuery {
	return q.Where(Categorys.UpdatedAt.Eq(value))
}

// WhereUpdatedAtAfter adds WHERE updated_at > condition
func (q *CategoryQuery) WhereUpdatedAtAfter(value time.Time) *CategoryQuery {
	return q.Where(Categorys.UpdatedAt.Gt(value))
}

// WhereUpdatedAtBefore adds WHERE updated_at < condition
func (q *CategoryQuery) WhereUpdatedAtBefore(value time.Time) *CategoryQuery {
	return q.Where(Categorys.UpdatedAt.Lt(value))
}

// WhereUpdatedAtBetween adds WHERE updated_at BETWEEN condition
func (q *CategoryQuery) WhereUpdatedAtBetween(start, end time.Time) *CategoryQuery {
	return q.Where(Categorys.UpdatedAt.Between(start, end))
}

// Ordering methods

// OrderByIDAsc adds ORDER BY id ASC
func (q *CategoryQuery) OrderByIDAsc() *CategoryQuery {
	return q.OrderBy(Categorys.ID.Asc())
}

// OrderByIDDesc adds ORDER BY id DESC
func (q *CategoryQuery) OrderByIDDesc() *CategoryQuery {
	return q.OrderBy(Categorys.ID.Desc())
}

// OrderByUserIDAsc adds ORDER BY user_id ASC
func (q *CategoryQuery) OrderByUserIDAsc() *CategoryQuery {
	return q.OrderBy(Categorys.UserID.Asc())
}

// OrderByUserIDDesc adds ORDER BY user_id DESC
func (q *CategoryQuery) OrderByUserIDDesc() *CategoryQuery {
	return q.OrderBy(Categorys.UserID.Desc())
}

// OrderByNameAsc adds ORDER BY name ASC
func (q *CategoryQuery) OrderByNameAsc() *CategoryQuery {
	return q.OrderBy(Categorys.Name.Asc())
}

// OrderByNameDesc adds ORDER BY name DESC
func (q *CategoryQuery) OrderByNameDesc() *CategoryQuery {
	return q.OrderBy(Categorys.Name.Desc())
}

// OrderByColorAsc adds ORDER BY color ASC
func (q *CategoryQuery) OrderByColorAsc() *CategoryQuery {
	return q.OrderBy(Categorys.Color.Asc())
}

// OrderByColorDesc adds ORDER BY color DESC
func (q *CategoryQuery) OrderByColorDesc() *CategoryQuery {
	return q.OrderBy(Categorys.Color.Desc())
}

// OrderByDescriptionAsc adds ORDER BY description ASC
func (q *CategoryQuery) OrderByDescriptionAsc() *CategoryQuery {
	return q.OrderBy(Categorys.Description.Asc())
}

// OrderByDescriptionDesc adds ORDER BY description DESC
func (q *CategoryQuery) OrderByDescriptionDesc() *CategoryQuery {
	return q.OrderBy(Categorys.Description.Desc())
}

// OrderByCreatedAtAsc adds ORDER BY created_at ASC
func (q *CategoryQuery) OrderByCreatedAtAsc() *CategoryQuery {
	return q.OrderBy(Categorys.CreatedAt.Asc())
}

// OrderByCreatedAtDesc adds ORDER BY created_at DESC
func (q *CategoryQuery) OrderByCreatedAtDesc() *CategoryQuery {
	return q.OrderBy(Categorys.CreatedAt.Desc())
}

// OrderByUpdatedAtAsc adds ORDER BY updated_at ASC
func (q *CategoryQuery) OrderByUpdatedAtAsc() *CategoryQuery {
	return q.OrderBy(Categorys.UpdatedAt.Asc())
}

// OrderByUpdatedAtDesc adds ORDER BY updated_at DESC
func (q *CategoryQuery) OrderByUpdatedAtDesc() *CategoryQuery {
	return q.OrderBy(Categorys.UpdatedAt.Desc())
}

// Execution methods return the underlying Query methods
func (q *CategoryQuery) Find() ([]Category, error) {
	return q.Query.Find()
}

func (q *CategoryQuery) First() (*Category, error) {
	return q.Query.First()
}

func (q *CategoryQuery) Count() (int64, error) {
	return q.Query.Count()
}

func (q *CategoryQuery) Exists() (bool, error) {
	return q.Query.Exists()
}

func (q *CategoryQuery) Delete() (int64, error) {
	return q.Query.Delete()
}
