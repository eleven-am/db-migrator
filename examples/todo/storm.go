//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: todo
// Models found: 7
// Generated on: 2025-07-17 01:02:48 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=todo
//
// For more information, see:
//   https://github.com/eleven-am/storm

package todo

import (
	"context"
	"fmt"
	"github.com/eleven-am/storm/pkg/storm"
	"github.com/jmoiron/sqlx"
)

// Storm provides a centralized access point for all repositories
//
// Basic usage:
//
//	storm := NewStorm(db)
//	user, err := ststorm.Users.FindByID(ctx, "123")
//	users, err := ststorm.Users.Query().Where(Users.IsActive.Eq(true)).Find()
//
// All repositories inherit these methods from the base repository:
//
// Single Record Operations:
//   - Create(ctx, record) - Insert single record
//   - FindByID(ctx, id) - Find record by primary key
//   - Update(ctx, record) - Update single record by primary key
//   - Delete(ctx, id) - Delete record by primary key ID
//   - DeleteRecord(ctx, record) - Delete record using the record instance
//
// Batch Operations:
//   - CreateMany(ctx, records) - Insert multiple records in transaction
//   - UpdateMany(ctx, updates, condition) - Update multiple records with condition
//   - BulkUpdate(ctx, records, opts) - Bulk update using CTE with VALUES
//   - Upsert(ctx, record, opts) - Insert or update on conflict
//   - UpsertMany(ctx, records, opts) - Batch upsert operations
//
// Transaction support:
//
//	err := ststorm.WithTransaction(ctx, func(txStorm *Storm) error {
//	    // All operations here run in a transaction
//	    return txStstorm.Users.Create(ctx, newUser)
//	})
type Storm struct {
	*storm.Storm

	// All repositories

	Categories *CategoryRepository

	Comments *CommentRepository

	Tags *TagRepository

	Todos *TodoRepository

	TodoTags *TodoTagRepository

	Users *UserRepository

	UserTags *UserTagRepository
}

func NewStorm(db *sqlx.DB) *Storm {
	baseStorm := storm.NewStorm(db)

	storm := &Storm{
		Storm: baseStorm,
	}

	ststorm.initializeRepositories()

	return storm
}

func (s *Storm) WithTransaction(ctx context.Context, fn func(*Storm) error) error {
	return s.Ststorm.WithTransaction(ctx, func(baseStorm *storm.Storm) error {
		txStorm := &Storm{
			Storm: baseStorm,
		}
		txStstorm.initializeRepositories()
		return fn(txStorm)
	})
}

func (s *Storm) WithTransactionOptions(ctx context.Context, opts *storm.TransactionOptions, fn func(*Storm) error) error {
	return s.Ststorm.WithTransactionOptions(ctx, opts, func(baseStorm *storm.Storm) error {
		txStorm := &Storm{
			Storm: baseStorm,
		}
		txStstorm.initializeRepositories()
		return fn(txStorm)
	})
}

func (s *Storm) initializeRepositories() {
	executor := s.GetExecutor()

	if baseRepo, err := storm.NewRepositoryWithExecutor[Category](executor, CategoryMetadata); err == nil {
		s.Categories = &CategoryRepository{
			Repository: baseRepo,
		}
	} else {
		panic(fmt.Errorf("failed to initialize Category repository: %w", err))
	}

	if baseRepo, err := storm.NewRepositoryWithExecutor[Comment](executor, CommentMetadata); err == nil {
		s.Comments = &CommentRepository{
			Repository: baseRepo,
		}
	} else {
		panic(fmt.Errorf("failed to initialize Comment repository: %w", err))
	}

	if baseRepo, err := storm.NewRepositoryWithExecutor[Tag](executor, TagMetadata); err == nil {
		s.Tags = &TagRepository{
			Repository: baseRepo,
		}
	} else {
		panic(fmt.Errorf("failed to initialize Tag repository: %w", err))
	}

	if baseRepo, err := storm.NewRepositoryWithExecutor[Todo](executor, TodoMetadata); err == nil {
		s.Todos = &TodoRepository{
			Repository: baseRepo,
		}
	} else {
		panic(fmt.Errorf("failed to initialize Todo repository: %w", err))
	}

	if baseRepo, err := storm.NewRepositoryWithExecutor[TodoTag](executor, TodoTagMetadata); err == nil {
		s.TodoTags = &TodoTagRepository{
			Repository: baseRepo,
		}
	} else {
		panic(fmt.Errorf("failed to initialize TodoTag repository: %w", err))
	}

	if baseRepo, err := storm.NewRepositoryWithExecutor[User](executor, UserMetadata); err == nil {
		s.Users = &UserRepository{
			Repository: baseRepo,
		}
	} else {
		panic(fmt.Errorf("failed to initialize User repository: %w", err))
	}

	if baseRepo, err := storm.NewRepositoryWithExecutor[UserTag](executor, UserTagMetadata); err == nil {
		s.UserTags = &UserTagRepository{
			Repository: baseRepo,
		}
	} else {
		panic(fmt.Errorf("failed to initialize UserTag repository: %w", err))
	}

}
