// Code generated by Storm ORM generator. DO NOT EDIT.
// Generated at: 2025-07-15 12:54:23

package todo

import (
	"context"
	"fmt"
	"github.com/eleven-am/storm/internal/orm"
	"github.com/jmoiron/sqlx"
)

// TagRepository provides type-safe operations for Tag
type TagRepository struct {
	*orm.Repository[Tag]
}

// newTagRepository creates a new Tag repository (internal use only - use Storm)
func newTagRepository(db *sqlx.DB) (*TagRepository, error) {
	baseRepo, err := orm.NewRepository[Tag](db)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository: %w", err)
	}

	return &TagRepository{
		Repository: baseRepo,
	}, nil
}

// newTagRepositoryWithTx creates a new Tag repository using an existing transaction (internal use only - use Storm)
func newTagRepositoryWithTx(tx *sqlx.Tx) (*TagRepository, error) {
	baseRepo, err := orm.NewRepositoryWithTx[Tag](tx)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository with transaction: %w", err)
	}

	return &TagRepository{
		Repository: baseRepo,
	}, nil
}

// Query returns a type-safe query builder for Tag
func (r *TagRepository) Query() *TagQuery {
	return &TagQuery{
		Query: r.Repository.Query(),
		repo:  r,
	}
}

// QueryContext returns a type-safe query builder for Tag with context
func (r *TagRepository) QueryContext(ctx context.Context) *TagQuery {
	return &TagQuery{
		Query: r.Repository.QueryContext(ctx),
		repo:  r,
	}
}

// WithTodos includes the Todos relationship in queries
func (r *TagRepository) WithTodos() *TagQuery {
	return &TagQuery{
		Query: r.Repository.Query().Include("Todos"),
		repo:  r,
	}
}

// WithUsers includes the Users relationship in queries
func (r *TagRepository) WithUsers() *TagQuery {
	return &TagQuery{
		Query: r.Repository.Query().Include("Users"),
		repo:  r,
	}
}

// Domain-specific finder methods

// FindByName finds a Tag by Name
func (r *TagRepository) FindByName(ctx context.Context, value string) (*Tag, error) {
	return r.QueryContext(ctx).Where(Tags.Name.Eq(value)).First()
}

// FindByIDLike finds Tag records where ID matches pattern
func (r *TagRepository) FindByIDLike(ctx context.Context, pattern string) ([]Tag, error) {
	return r.QueryContext(ctx).Where(Tags.ID.Like(pattern)).Find()
}

// FindByNameLike finds Tag records where Name matches pattern
func (r *TagRepository) FindByNameLike(ctx context.Context, pattern string) ([]Tag, error) {
	return r.QueryContext(ctx).Where(Tags.Name.Like(pattern)).Find()
}

// FindByColorLike finds Tag records where Color matches pattern
func (r *TagRepository) FindByColorLike(ctx context.Context, pattern string) ([]Tag, error) {
	return r.QueryContext(ctx).Where(Tags.Color.Like(pattern)).Find()
}

// Batch operations (available methods from base repository)
// - UpsertMany: bulk upsert with ON CONFLICT resolution
// - BulkUpdate: update multiple records with different values
// Usage examples:
//   repo.UpsertMany(records, orm.UpsertOptions{ConflictColumns: []string{"id"}})
//   repo.BulkUpdate(records, orm.BulkUpdateOptions{})
