// Code generated by Storm ORM generator. DO NOT EDIT.
// Generated at: 2025-07-15 12:54:23

package todo

import (
	"github.com/eleven-am/storm/internal/orm"
	"time"
)

// UserTagQuery provides type-safe query building for UserTag
type UserTagQuery struct {
	*orm.Query[UserTag]
	repo *UserTagRepository
}

// Where adds a type-safe WHERE condition
func (q *UserTagQuery) Where(condition orm.Condition) *UserTagQuery {
	q.Query = q.Query.Where(condition)
	return q
}

// OrderBy adds ordering to the query
func (q *UserTagQuery) OrderBy(expressions ...string) *UserTagQuery {
	q.Query = q.Query.OrderBy(expressions...)
	return q
}

// Limit sets the LIMIT clause
func (q *UserTagQuery) Limit(limit uint64) *UserTagQuery {
	q.Query = q.Query.Limit(limit)
	return q
}

// Offset sets the OFFSET clause
func (q *UserTagQuery) Offset(offset uint64) *UserTagQuery {
	q.Query = q.Query.Offset(offset)
	return q
}

// Type-safe column-specific query methods

// WhereUserIDEq adds WHERE user_id = condition
func (q *UserTagQuery) WhereUserIDEq(value string) *UserTagQuery {
	return q.Where(UserTags.UserID.Eq(value))
}

// WhereUserIDLike adds WHERE user_id LIKE condition
func (q *UserTagQuery) WhereUserIDLike(pattern string) *UserTagQuery {
	return q.Where(UserTags.UserID.Like(pattern))
}

// WhereTagIDEq adds WHERE tag_id = condition
func (q *UserTagQuery) WhereTagIDEq(value string) *UserTagQuery {
	return q.Where(UserTags.TagID.Eq(value))
}

// WhereTagIDLike adds WHERE tag_id LIKE condition
func (q *UserTagQuery) WhereTagIDLike(pattern string) *UserTagQuery {
	return q.Where(UserTags.TagID.Like(pattern))
}

// WhereCreatedAtEq adds WHERE created_at = condition
func (q *UserTagQuery) WhereCreatedAtEq(value time.Time) *UserTagQuery {
	return q.Where(UserTags.CreatedAt.Eq(value))
}

// WhereCreatedAtAfter adds WHERE created_at > condition
func (q *UserTagQuery) WhereCreatedAtAfter(value time.Time) *UserTagQuery {
	return q.Where(UserTags.CreatedAt.Gt(value))
}

// WhereCreatedAtBefore adds WHERE created_at < condition
func (q *UserTagQuery) WhereCreatedAtBefore(value time.Time) *UserTagQuery {
	return q.Where(UserTags.CreatedAt.Lt(value))
}

// WhereCreatedAtBetween adds WHERE created_at BETWEEN condition
func (q *UserTagQuery) WhereCreatedAtBetween(start, end time.Time) *UserTagQuery {
	return q.Where(UserTags.CreatedAt.Between(start, end))
}

// Ordering methods

// OrderByUserIDAsc adds ORDER BY user_id ASC
func (q *UserTagQuery) OrderByUserIDAsc() *UserTagQuery {
	return q.OrderBy(UserTags.UserID.Asc())
}

// OrderByUserIDDesc adds ORDER BY user_id DESC
func (q *UserTagQuery) OrderByUserIDDesc() *UserTagQuery {
	return q.OrderBy(UserTags.UserID.Desc())
}

// OrderByTagIDAsc adds ORDER BY tag_id ASC
func (q *UserTagQuery) OrderByTagIDAsc() *UserTagQuery {
	return q.OrderBy(UserTags.TagID.Asc())
}

// OrderByTagIDDesc adds ORDER BY tag_id DESC
func (q *UserTagQuery) OrderByTagIDDesc() *UserTagQuery {
	return q.OrderBy(UserTags.TagID.Desc())
}

// OrderByCreatedAtAsc adds ORDER BY created_at ASC
func (q *UserTagQuery) OrderByCreatedAtAsc() *UserTagQuery {
	return q.OrderBy(UserTags.CreatedAt.Asc())
}

// OrderByCreatedAtDesc adds ORDER BY created_at DESC
func (q *UserTagQuery) OrderByCreatedAtDesc() *UserTagQuery {
	return q.OrderBy(UserTags.CreatedAt.Desc())
}

// Execution methods return the underlying Query methods
func (q *UserTagQuery) Find() ([]UserTag, error) {
	return q.Query.Find()
}

func (q *UserTagQuery) First() (*UserTag, error) {
	return q.Query.First()
}

func (q *UserTagQuery) Count() (int64, error) {
	return q.Query.Count()
}

func (q *UserTagQuery) Exists() (bool, error) {
	return q.Query.Exists()
}

func (q *UserTagQuery) Delete() (int64, error) {
	return q.Query.Delete()
}
