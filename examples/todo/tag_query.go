// Code generated by Storm ORM generator. DO NOT EDIT.
// Generated at: 2025-07-15 12:54:23

package todo

import (
	"github.com/eleven-am/storm/internal/orm"
	"time"
)

// TagQuery provides type-safe query building for Tag
type TagQuery struct {
	*orm.Query[Tag]
	repo *TagRepository
}

// Where adds a type-safe WHERE condition
func (q *TagQuery) Where(condition orm.Condition) *TagQuery {
	q.Query = q.Query.Where(condition)
	return q
}

// OrderBy adds ordering to the query
func (q *TagQuery) OrderBy(expressions ...string) *TagQuery {
	q.Query = q.Query.OrderBy(expressions...)
	return q
}

// Limit sets the LIMIT clause
func (q *TagQuery) Limit(limit uint64) *TagQuery {
	q.Query = q.Query.Limit(limit)
	return q
}

// Offset sets the OFFSET clause
func (q *TagQuery) Offset(offset uint64) *TagQuery {
	q.Query = q.Query.Offset(offset)
	return q
}

// IncludeTodos includes the Todos relationship
func (q *TagQuery) IncludeTodos() *TagQuery {
	q.Query = q.Query.Include("Todos")
	return q
}

// IncludeUsers includes the Users relationship
func (q *TagQuery) IncludeUsers() *TagQuery {
	q.Query = q.Query.Include("Users")
	return q
}

// Type-safe column-specific query methods

// WhereIDEq adds WHERE id = condition
func (q *TagQuery) WhereIDEq(value string) *TagQuery {
	return q.Where(Tags.ID.Eq(value))
}

// WhereIDLike adds WHERE id LIKE condition
func (q *TagQuery) WhereIDLike(pattern string) *TagQuery {
	return q.Where(Tags.ID.Like(pattern))
}

// WhereNameEq adds WHERE name = condition
func (q *TagQuery) WhereNameEq(value string) *TagQuery {
	return q.Where(Tags.Name.Eq(value))
}

// WhereNameLike adds WHERE name LIKE condition
func (q *TagQuery) WhereNameLike(pattern string) *TagQuery {
	return q.Where(Tags.Name.Like(pattern))
}

// WhereColorEq adds WHERE color = condition
func (q *TagQuery) WhereColorEq(value string) *TagQuery {
	return q.Where(Tags.Color.Eq(value))
}

// WhereColorLike adds WHERE color LIKE condition
func (q *TagQuery) WhereColorLike(pattern string) *TagQuery {
	return q.Where(Tags.Color.Like(pattern))
}

// WhereCreatedAtEq adds WHERE created_at = condition
func (q *TagQuery) WhereCreatedAtEq(value time.Time) *TagQuery {
	return q.Where(Tags.CreatedAt.Eq(value))
}

// WhereCreatedAtAfter adds WHERE created_at > condition
func (q *TagQuery) WhereCreatedAtAfter(value time.Time) *TagQuery {
	return q.Where(Tags.CreatedAt.Gt(value))
}

// WhereCreatedAtBefore adds WHERE created_at < condition
func (q *TagQuery) WhereCreatedAtBefore(value time.Time) *TagQuery {
	return q.Where(Tags.CreatedAt.Lt(value))
}

// WhereCreatedAtBetween adds WHERE created_at BETWEEN condition
func (q *TagQuery) WhereCreatedAtBetween(start, end time.Time) *TagQuery {
	return q.Where(Tags.CreatedAt.Between(start, end))
}

// Ordering methods

// OrderByIDAsc adds ORDER BY id ASC
func (q *TagQuery) OrderByIDAsc() *TagQuery {
	return q.OrderBy(Tags.ID.Asc())
}

// OrderByIDDesc adds ORDER BY id DESC
func (q *TagQuery) OrderByIDDesc() *TagQuery {
	return q.OrderBy(Tags.ID.Desc())
}

// OrderByNameAsc adds ORDER BY name ASC
func (q *TagQuery) OrderByNameAsc() *TagQuery {
	return q.OrderBy(Tags.Name.Asc())
}

// OrderByNameDesc adds ORDER BY name DESC
func (q *TagQuery) OrderByNameDesc() *TagQuery {
	return q.OrderBy(Tags.Name.Desc())
}

// OrderByColorAsc adds ORDER BY color ASC
func (q *TagQuery) OrderByColorAsc() *TagQuery {
	return q.OrderBy(Tags.Color.Asc())
}

// OrderByColorDesc adds ORDER BY color DESC
func (q *TagQuery) OrderByColorDesc() *TagQuery {
	return q.OrderBy(Tags.Color.Desc())
}

// OrderByCreatedAtAsc adds ORDER BY created_at ASC
func (q *TagQuery) OrderByCreatedAtAsc() *TagQuery {
	return q.OrderBy(Tags.CreatedAt.Asc())
}

// OrderByCreatedAtDesc adds ORDER BY created_at DESC
func (q *TagQuery) OrderByCreatedAtDesc() *TagQuery {
	return q.OrderBy(Tags.CreatedAt.Desc())
}

// Execution methods return the underlying Query methods
func (q *TagQuery) Find() ([]Tag, error) {
	return q.Query.Find()
}

func (q *TagQuery) First() (*Tag, error) {
	return q.Query.First()
}

func (q *TagQuery) Count() (int64, error) {
	return q.Query.Count()
}

func (q *TagQuery) Exists() (bool, error) {
	return q.Query.Exists()
}

func (q *TagQuery) Delete() (int64, error) {
	return q.Query.Delete()
}
