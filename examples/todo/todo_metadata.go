//go:build !exclude_generated
// +build !exclude_generated

// Code generated by storm orm generate-orm; DO NOT EDIT.
//
// This file was automatically generated from Go struct definitions.
// Any changes made to this file will be lost when regenerating.
//
// Source package: todo
// Model: Todo
// Generated on: 2025-07-17 00:36:07 CEST
//
// To regenerate this file, run:
//   storm orm generate-orm --package=todo
//
// For more information, see:
//   https://github.com/eleven-am/storm

package todo

import (
	"github.com/eleven-am/storm/internal/orm"
)

// TodoMetadata provides compile-time metadata for Todo
var TodoMetadata = &orm.ModelMetadata{
	TableName:  "todos",
	StructName: "Todo",

	Columns: map[string]*orm.ColumnMetadata{
		"ID": {
			FieldName:       "ID",
			DBName:          "id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    true,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Todo)
				return m.ID
			},
		},
		"UserID": {
			FieldName:       "UserID",
			DBName:          "user_id",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Todo)
				return m.UserID
			},
		},
		"CategoryID": {
			FieldName:       "CategoryID",
			DBName:          "category_id",
			GoType:          "string",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Todo)
				if m.CategoryID != nil {
					return *m.CategoryID
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(Todo).CategoryID == nil
			},
		},
		"Title": {
			FieldName:       "Title",
			DBName:          "title",
			GoType:          "string",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Todo)
				return m.Title
			},
		},
		"Description": {
			FieldName:       "Description",
			DBName:          "description",
			GoType:          "string",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Todo)
				if m.Description != nil {
					return *m.Description
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(Todo).Description == nil
			},
		},
		"Status": {
			FieldName:       "Status",
			DBName:          "status",
			GoType:          "TodoStatus",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Todo)
				return m.Status
			},
		},
		"Priority": {
			FieldName:       "Priority",
			DBName:          "priority",
			GoType:          "TodoPriority",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Todo)
				return m.Priority
			},
		},
		"DueDate": {
			FieldName:       "DueDate",
			DBName:          "due_date",
			GoType:          "time.Time",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Todo)
				if m.DueDate != nil {
					return *m.DueDate
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(Todo).DueDate == nil
			},
		},
		"CompletedAt": {
			FieldName:       "CompletedAt",
			DBName:          "completed_at",
			GoType:          "time.Time",
			IsPointer:       true,
			IsPrimaryKey:    false,
			IsAutoGenerated: false,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Todo)
				if m.CompletedAt != nil {
					return *m.CompletedAt
				}
				return nil
			},
			IsNil: func(model interface{}) bool {
				return model.(Todo).CompletedAt == nil
			},
		},
		"CreatedAt": {
			FieldName:       "CreatedAt",
			DBName:          "created_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Todo)
				return m.CreatedAt
			},
		},
		"UpdatedAt": {
			FieldName:       "UpdatedAt",
			DBName:          "updated_at",
			GoType:          "time.Time",
			IsPointer:       false,
			IsPrimaryKey:    false,
			IsAutoGenerated: true,

			// Generated accessor functions for zero-reflection field access
			GetValue: func(model interface{}) interface{} {
				m := model.(Todo)
				return m.UpdatedAt
			},
		},
	},

	ColumnMap: map[string]string{
		"ID":          "id",
		"UserID":      "user_id",
		"CategoryID":  "category_id",
		"Title":       "title",
		"Description": "description",
		"Status":      "status",
		"Priority":    "priority",
		"DueDate":     "due_date",
		"CompletedAt": "completed_at",
		"CreatedAt":   "created_at",
		"UpdatedAt":   "updated_at",
	},

	ReverseMap: map[string]string{
		"id":           "ID",
		"user_id":      "UserID",
		"category_id":  "CategoryID",
		"title":        "Title",
		"description":  "Description",
		"status":       "Status",
		"priority":     "Priority",
		"due_date":     "DueDate",
		"completed_at": "CompletedAt",
		"created_at":   "CreatedAt",
		"updated_at":   "UpdatedAt",
	},

	PrimaryKeys: []string{
		"id",
	},

	Relationships: map[string]*orm.RelationshipMetadata{
		"User": {
			Name:       "User",
			Type:       "belongs_to",
			Target:     "User",
			ForeignKey: "user_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Todo).User = value.(*User)
			},
			IsSlice: false,
		},
		"Category": {
			Name:       "Category",
			Type:       "belongs_to",
			Target:     "Category",
			ForeignKey: "category_id",
			TargetKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Todo).Category = value.(*Category)
			},
			IsSlice: false,
		},
		"Tags": {
			Name:      "Tags",
			Type:      "has_many_through",
			Target:    "Tag",
			SourceKey: "id",
			TargetKey: "id",
			ThroughFK: "todo_id",
			ThroughTK: "tag_id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Todo).Tags = value.([]Tag)
			},
			IsSlice: true,
		},
		"Comments": {
			Name:       "Comments",
			Type:       "has_many",
			Target:     "Comment",
			ForeignKey: "todo_id",
			SourceKey:  "id",

			// Generated accessor functions for relationships
			SetValue: func(model interface{}, value interface{}) {
				model.(*Todo).Comments = value.([]Comment)
			},
			IsSlice: true,
		},
	},
}
