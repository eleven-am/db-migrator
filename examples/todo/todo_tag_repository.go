// Code generated by Storm ORM generator. DO NOT EDIT.
// Generated at: 2025-07-15 12:54:23

package todo

import (
	"context"
	"fmt"
	"github.com/eleven-am/storm/internal/orm"
	"github.com/jmoiron/sqlx"
)

// TodoTagRepository provides type-safe operations for TodoTag
type TodoTagRepository struct {
	*orm.Repository[TodoTag]
}

// newTodoTagRepository creates a new TodoTag repository (internal use only - use Storm)
func newTodoTagRepository(db *sqlx.DB) (*TodoTagRepository, error) {
	baseRepo, err := orm.NewRepository[TodoTag](db)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository: %w", err)
	}

	return &TodoTagRepository{
		Repository: baseRepo,
	}, nil
}

// newTodoTagRepositoryWithTx creates a new TodoTag repository using an existing transaction (internal use only - use Storm)
func newTodoTagRepositoryWithTx(tx *sqlx.Tx) (*TodoTagRepository, error) {
	baseRepo, err := orm.NewRepositoryWithTx[TodoTag](tx)
	if err != nil {
		return nil, fmt.Errorf("failed to create base repository with transaction: %w", err)
	}

	return &TodoTagRepository{
		Repository: baseRepo,
	}, nil
}

// Query returns a type-safe query builder for TodoTag
func (r *TodoTagRepository) Query() *TodoTagQuery {
	return &TodoTagQuery{
		Query: r.Repository.Query(),
		repo:  r,
	}
}

// QueryContext returns a type-safe query builder for TodoTag with context
func (r *TodoTagRepository) QueryContext(ctx context.Context) *TodoTagQuery {
	return &TodoTagQuery{
		Query: r.Repository.QueryContext(ctx),
		repo:  r,
	}
}

// Domain-specific finder methods

// FindByTodoIDLike finds TodoTag records where TodoID matches pattern
func (r *TodoTagRepository) FindByTodoIDLike(ctx context.Context, pattern string) ([]TodoTag, error) {
	return r.QueryContext(ctx).Where(TodoTags.TodoID.Like(pattern)).Find()
}

// FindByTagIDLike finds TodoTag records where TagID matches pattern
func (r *TodoTagRepository) FindByTagIDLike(ctx context.Context, pattern string) ([]TodoTag, error) {
	return r.QueryContext(ctx).Where(TodoTags.TagID.Like(pattern)).Find()
}

// Batch operations (available methods from base repository)
// - UpsertMany: bulk upsert with ON CONFLICT resolution
// - BulkUpdate: update multiple records with different values
// Usage examples:
//   repo.UpsertMany(records, orm.UpsertOptions{ConflictColumns: []string{"id"}})
//   repo.BulkUpdate(records, orm.BulkUpdateOptions{})
