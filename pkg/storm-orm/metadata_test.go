package orm

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

// TestModelMetadata tests the ModelMetadata structure and methods
func TestModelMetadata(t *testing.T) {
	t.Run("Valid metadata structure", func(t *testing.T) {
		metadata := createTestUserMetadata()

		assert.Equal(t, "users", metadata.TableName)
		assert.Equal(t, "TestUser", metadata.StructName)
		assert.Len(t, metadata.Columns, 6)
		assert.Len(t, metadata.ColumnMap, 6)
		assert.Len(t, metadata.ReverseMap, 6)
		assert.Equal(t, []string{"id"}, metadata.PrimaryKeys)

		// Test column metadata
		idCol, exists := metadata.Columns["ID"]
		assert.True(t, exists)
		assert.Equal(t, "ID", idCol.FieldName)
		assert.Equal(t, "id", idCol.DBName)
		assert.Equal(t, "int", idCol.GoType)
		assert.True(t, idCol.IsPrimaryKey)
		assert.True(t, idCol.IsAutoGenerated)
		assert.False(t, idCol.IsUnique)
		assert.False(t, idCol.IsNullable)

		emailCol, exists := metadata.Columns["Email"]
		assert.True(t, exists)
		assert.Equal(t, "Email", emailCol.FieldName)
		assert.Equal(t, "email", emailCol.DBName)
		assert.Equal(t, "string", emailCol.GoType)
		assert.False(t, emailCol.IsPrimaryKey)
		assert.False(t, emailCol.IsAutoGenerated)
		assert.True(t, emailCol.IsUnique)
		assert.False(t, emailCol.IsNullable)
	})

	t.Run("Column mapping", func(t *testing.T) {
		metadata := createTestUserMetadata()

		// Test forward mapping (field name -> db name)
		assert.Equal(t, "id", metadata.ColumnMap["ID"])
		assert.Equal(t, "name", metadata.ColumnMap["Name"])
		assert.Equal(t, "email", metadata.ColumnMap["Email"])
		assert.Equal(t, "is_active", metadata.ColumnMap["IsActive"])
		assert.Equal(t, "created_at", metadata.ColumnMap["CreatedAt"])
		assert.Equal(t, "updated_at", metadata.ColumnMap["UpdatedAt"])

		// Test reverse mapping (db name -> field name)
		assert.Equal(t, "ID", metadata.ReverseMap["id"])
		assert.Equal(t, "Name", metadata.ReverseMap["name"])
		assert.Equal(t, "Email", metadata.ReverseMap["email"])
		assert.Equal(t, "IsActive", metadata.ReverseMap["is_active"])
		assert.Equal(t, "CreatedAt", metadata.ReverseMap["created_at"])
		assert.Equal(t, "UpdatedAt", metadata.ReverseMap["updated_at"])
	})

	t.Run("GetValue functions", func(t *testing.T) {
		metadata := createTestUserMetadata()
		user := TestUser{
			ID:       42,
			Name:     "John Doe",
			Email:    "john@example.com",
			IsActive: true,
		}

		// Test GetValue for each column
		idCol := metadata.Columns["ID"]
		assert.Equal(t, 42, idCol.GetValue(user))

		nameCol := metadata.Columns["Name"]
		assert.Equal(t, "John Doe", nameCol.GetValue(user))

		emailCol := metadata.Columns["Email"]
		assert.Equal(t, "john@example.com", emailCol.GetValue(user))

		activeCol := metadata.Columns["IsActive"]
		assert.Equal(t, true, activeCol.GetValue(user))
	})

	t.Run("GetNonAutoGeneratedColumns", func(t *testing.T) {
		metadata := createTestUserMetadata()

		nonAutoGenCols := []string{}
		for fieldName, col := range metadata.Columns {
			if !col.IsAutoGenerated {
				nonAutoGenCols = append(nonAutoGenCols, fieldName)
			}
		}

		// Should exclude ID, CreatedAt, UpdatedAt
		assert.Contains(t, nonAutoGenCols, "Name")
		assert.Contains(t, nonAutoGenCols, "Email")
		assert.Contains(t, nonAutoGenCols, "IsActive")
		assert.NotContains(t, nonAutoGenCols, "ID")
		assert.NotContains(t, nonAutoGenCols, "CreatedAt")
		assert.NotContains(t, nonAutoGenCols, "UpdatedAt")
	})

	t.Run("GetNonPrimaryKeyColumns", func(t *testing.T) {
		metadata := createTestUserMetadata()

		nonPKCols := []string{}
		for fieldName, col := range metadata.Columns {
			if !col.IsPrimaryKey {
				nonPKCols = append(nonPKCols, fieldName)
			}
		}

		// Should exclude ID
		assert.Contains(t, nonPKCols, "Name")
		assert.Contains(t, nonPKCols, "Email")
		assert.Contains(t, nonPKCols, "IsActive")
		assert.Contains(t, nonPKCols, "CreatedAt")
		assert.Contains(t, nonPKCols, "UpdatedAt")
		assert.NotContains(t, nonPKCols, "ID")
	})

	t.Run("Empty metadata validation", func(t *testing.T) {
		// Test minimal valid metadata
		metadata := &ModelMetadata{
			TableName:   "test_table",
			StructName:  "TestStruct",
			Columns:     make(map[string]*ColumnMetadata),
			ColumnMap:   make(map[string]string),
			ReverseMap:  make(map[string]string),
			PrimaryKeys: []string{},
		}

		assert.Equal(t, "test_table", metadata.TableName)
		assert.Equal(t, "TestStruct", metadata.StructName)
		assert.Empty(t, metadata.Columns)
		assert.Empty(t, metadata.PrimaryKeys)
	})
}

// TestColumnMetadata tests the ColumnMetadata structure
func TestColumnMetadata(t *testing.T) {
	t.Run("Column flags", func(t *testing.T) {
		// Test primary key column
		pkCol := &ColumnMetadata{
			FieldName:       "ID",
			DBName:          "id",
			GoType:          "int",
			IsPrimaryKey:    true,
			IsAutoGenerated: true,
			IsUnique:        false,
			IsNullable:      false,
			GetValue: func(model interface{}) interface{} {
				return model.(TestUser).ID
			},
		}

		assert.True(t, pkCol.IsPrimaryKey)
		assert.True(t, pkCol.IsAutoGenerated)
		assert.False(t, pkCol.IsUnique)
		assert.False(t, pkCol.IsNullable)

		// Test unique column
		uniqueCol := &ColumnMetadata{
			FieldName:       "Email",
			DBName:          "email",
			GoType:          "string",
			IsPrimaryKey:    false,
			IsAutoGenerated: false,
			IsUnique:        true,
			IsNullable:      false,
			GetValue: func(model interface{}) interface{} {
				return model.(TestUser).Email
			},
		}

		assert.False(t, uniqueCol.IsPrimaryKey)
		assert.False(t, uniqueCol.IsAutoGenerated)
		assert.True(t, uniqueCol.IsUnique)
		assert.False(t, uniqueCol.IsNullable)

		// Test nullable column
		nullableCol := &ColumnMetadata{
			FieldName:       "Description",
			DBName:          "description",
			GoType:          "*string",
			IsPrimaryKey:    false,
			IsAutoGenerated: false,
			IsUnique:        false,
			IsNullable:      true,
			GetValue: func(model interface{}) interface{} {
				// Simulating a nullable field
				return nil
			},
		}

		assert.False(t, nullableCol.IsPrimaryKey)
		assert.False(t, nullableCol.IsAutoGenerated)
		assert.False(t, nullableCol.IsUnique)
		assert.True(t, nullableCol.IsNullable)
	})

	t.Run("GetValue nil handling", func(t *testing.T) {
		col := &ColumnMetadata{
			FieldName: "TestField",
			DBName:    "test_field",
			GoType:    "string",
			GetValue: func(model interface{}) interface{} {
				// Return nil for testing
				return nil
			},
		}

		user := TestUser{}
		value := col.GetValue(user)
		assert.Nil(t, value)
	})
}
