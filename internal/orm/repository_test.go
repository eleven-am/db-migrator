package orm

import (
	"testing"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/jmoiron/sqlx"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// TestRepositoryHelperMethods tests various repository helper methods
func TestRepositoryHelperMethods(t *testing.T) {
	db, _, err := sqlmock.New()
	require.NoError(t, err)
	defer db.Close()

	sqlxDB := sqlx.NewDb(db, "postgres")
	metadata := createTestUserMetadata()

	repo, err := NewRepository[TestUser](sqlxDB, metadata)
	require.NoError(t, err)

	t.Run("TableName", func(t *testing.T) {
		tableName := repo.TableName()
		assert.Equal(t, "users", tableName)
	})

	t.Run("Columns", func(t *testing.T) {
		columns := repo.Columns()
		assert.Contains(t, columns, "id")
		assert.Contains(t, columns, "name")
		assert.Contains(t, columns, "email")
		assert.Contains(t, columns, "is_active")
		assert.Contains(t, columns, "created_at")
		assert.Contains(t, columns, "updated_at")
	})

	t.Run("PrimaryKeys", func(t *testing.T) {
		pks := repo.PrimaryKeys()
		assert.Equal(t, []string{"id"}, pks)
	})

	t.Run("GetInsertFields", func(t *testing.T) {
		user := TestUser{
			Name:     "John Doe",
			Email:    "john@example.com",
			IsActive: true,
		}

		columns, values := repo.getInsertFields(user)

		// Should exclude auto-generated fields (id, created_at, updated_at)
		assert.Contains(t, columns, "name")
		assert.Contains(t, columns, "email")
		assert.Contains(t, columns, "is_active")
		assert.NotContains(t, columns, "id")
		assert.NotContains(t, columns, "created_at")
		assert.NotContains(t, columns, "updated_at")

		// Check values
		assert.Len(t, values, len(columns))
	})

	t.Run("GetUpdateFields", func(t *testing.T) {
		user := TestUser{
			ID:       1,
			Name:     "John Updated",
			Email:    "john.updated@example.com",
			IsActive: false,
		}

		fields := repo.getUpdateFields(user)

		// Should exclude primary keys and auto-generated fields
		assert.Contains(t, fields, "name")
		assert.Contains(t, fields, "email")
		assert.Contains(t, fields, "is_active")
		assert.NotContains(t, fields, "id")
		assert.NotContains(t, fields, "created_at")
		assert.NotContains(t, fields, "updated_at")
	})

	t.Run("GetPrimaryKeyValues", func(t *testing.T) {
		user := TestUser{
			ID:    42,
			Name:  "Test User",
			Email: "test@example.com",
		}

		pkValues := repo.getPrimaryKeyValues(user)
		assert.Equal(t, map[string]interface{}{"id": 42}, pkValues)
	})

	t.Run("GetAutoGeneratedColumns", func(t *testing.T) {
		autoCols := repo.getAutoGeneratedColumns()
		assert.Contains(t, autoCols, "id")
		assert.Contains(t, autoCols, "created_at")
		assert.Contains(t, autoCols, "updated_at")
	})

	t.Run("AddMiddleware", func(t *testing.T) {
		// Test adding middleware
		middlewareCalled := false
		repo.AddMiddleware(func(next QueryMiddlewareFunc) QueryMiddlewareFunc {
			return func(ctx *MiddlewareContext) error {
				middlewareCalled = true
				return next(ctx)
			}
		})
		// Can't directly test the middleware is set, but we can verify it doesn't panic
		assert.False(t, middlewareCalled) // Not called until a query is executed
	})
}

// TestNewRepository tests repository creation
func TestNewRepository(t *testing.T) {
	db, _, err := sqlmock.New()
	require.NoError(t, err)
	defer db.Close()

	sqlxDB := sqlx.NewDb(db, "postgres")

	t.Run("Valid metadata", func(t *testing.T) {
		metadata := createTestUserMetadata()
		repo, err := NewRepository[TestUser](sqlxDB, metadata)
		require.NoError(t, err)
		assert.NotNil(t, repo)
		assert.Equal(t, sqlxDB, repo.db)
		assert.Equal(t, metadata, repo.metadata)
	})

	t.Run("Nil metadata", func(t *testing.T) {
		repo, err := NewRepository[TestUser](sqlxDB, nil)
		assert.Error(t, err)
		assert.Nil(t, repo)
		assert.Contains(t, err.Error(), "metadata cannot be nil")
	})

	t.Run("Nil database", func(t *testing.T) {
		metadata := createTestUserMetadata()
		repo, err := NewRepository[TestUser](nil, metadata)
		assert.Error(t, err)
		assert.Nil(t, repo)
		assert.Contains(t, err.Error(), "database cannot be nil")
	})
}
